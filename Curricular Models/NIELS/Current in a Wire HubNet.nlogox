<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0" snapToGrid="true">
  <code><![CDATA[globals [
  charge-flow  ; a variable to keep track of the number of
               ;   electrons that have flowed through the cathode
  wire-patches ; a patch-set that contains all the patches that represent the wire
  previous-identity-option ; stores how students are labeled
]

breed [ students student ]
students-own [
  slice-id        ; stores which slice I represent
  left-bound      ; the left side of my slice
  right-bound     ; the right side of my slice
  my-patches      ; a set of patches that are mine
  my-average-temp ; stores average temp of my-patches

  ; variables for HubNet client options
  user-name
  selected-nuclei
  watched-electron
]

breed [ electrons electron ]
electrons-own [ speed  ]

breed [ nuclei nucleus ]

patches-own [
  temp      ; variable to store how much heat is in the patch
  slice-num ; variable to store what slice a patch belongs in
]

;;;;;;;;;;;;;;;;;;;;;;
;; Setup Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;


to startup
  hubnet-reset
  ask turtles [ die ]
  setup
end

to setup
  set charge-flow 0

  ; clear all remnants of a previous wire
  ask turtles with [not is-student? self] [ die ]
  clear-all-plots
  clear-patches

  setup-wire
  divide-wire

  ; update labels of students if you need to
  if any? students with [user-name != "" ] [
    ask students with [user-name != ""] [
      update-my-slice-label
    ]
  ]
  set previous-identity-option identify-students?

  reset-ticks
end

; procedure to setup the wire and its nuclei
to setup-wire
  set-default-shape electrons "circle 2"

  ; create wire
  set wire-patches patches with [ pycor <= 16 and pycor >= -16 ]
  ask wire-patches [
    set pcolor gray
    set temp 20
    recolor
  ]

  ; create electrons
  let total-electrons 2 * num-students * nuclei-per-slice
  create-electrons total-electrons [
    setxy random-xcor random 30 - 15
    set heading (random 271) + 135
    set color orange - 2
    set speed random-float 1
  ]

  ; create labels for the battery terminals
  create-turtles 1 [
    setxy (min-pxcor + 6) -21
    set shape "plus"
    set size 6
  ]
  create-turtles 1 [
      setxy (max-pxcor - 6) -21
      set shape "minus"
      set size 6
  ]
end

; procedure to divide the wire into the appropriate number of slices
to divide-wire
  ; calculate the width of a slice based on num-students
  let slice-width (max-pxcor - min-pxcor) / num-students
  let l 0
  let r 0

  ; define a set of acceptable colors
  let color-list [ turquoise grey red orange brown sky green cyan pink violet ]

  ; Get the user name of any student currently logged in
  let logged-in-students filter [ a-student -> a-student != "" ] [user-name] of students
  ; Clear current students
  if any? students [ ask students [ die ] ]
  ; for every student
  foreach (range 1 (num-students + 1)) [ n ->

    ; calculate the left and right bound of its slice
    set l min-pxcor + (slice-width * (n - 1))
    set r l + slice-width

    ; create a student turtle to store all the necessary info
    create-students 1 [
      set user-name ""

      ; if there are students currently logged in, make sure to assign them a slice
      if not empty? logged-in-students [
        set user-name first logged-in-students
        set logged-in-students but-first logged-in-students
      ]

      set slice-id n
      set left-bound l
      set right-bound r
      set color item (n - 1) color-list

      ; put any patches in this slice into my-patches
      set my-patches patches with [ pxcor >= l and pxcor < r and (abs pycor <= 16) ]

      ; tell the patches which slice they're in
      ask my-patches [ set slice-num n ]

      ; create a hidden person in the middle of your slice
      setxy (round ((right-bound + left-bound) / 2)) 0
      hide-turtle

      ; create the nuclei
      ask n-of nuclei-per-slice my-patches [
        sprout-a-nucleus
      ]

      ; now make sure all of our HubNet options are good to go
      initialize-hubnet-client
    ]
     ; Then create a border along the left edge of the student
     create-turtles 1 [
      setxy l 0
      set shape "line"
      set size 33
      set heading 0
      set color white
    ]
  ]

  ; If there are still students that haven't been assigned
  ;   a slice, we have to ask them to leave.
  if not empty? logged-in-students [
    foreach logged-in-students [ a-student ->
      user-message "There is no more space in the wire!\nYou may want to change the 'num-students' slider\nand then re-setup."
      hubnet-kick-client a-student
    ]
  ]

end

;;;;;;;;;;;;;;;;;;;;;;
;;;; Go Procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;

to go
  ; listen to HubNet clients
  listen-to-clients

  every .25 [
    ; Handle slow radiation of temperature out
    ask wire-patches [ if temp > 20 [ set temp temp - 0.75 ]] ; adds a loss-factor to the temperature of each patch due to radiation

    ; Handle diffusion of temperature from one patch to its neighbors
    spread-temp
    ask wire-patches [ recolor ]

    ; Update the stats on each client
    send-stats-to-students
  ]

  ; If there's been a change to the student label option, update the clients
  if identify-students? != previous-identity-option [
    if any? students with [user-name != "" ] [
      ask students with [user-name != ""] [
        update-my-slice-label
      ]
    ]
    set previous-identity-option identify-students?
  ]

  ask electrons [ move ]

  tick
end


; this procedure has all of the rules for how electrons move
; and how to perform simple point collisions with nuclei in
; the wire
to move ; electron procedure

  ; calculate the distance to move
  let dist max (list (speed + voltage) 1)

  ; if the electron has reached the cathode, generate a new electron and die
  if pxcor <= (min-pxcor + dist) [
    pen-up
    set charge-flow charge-flow + 1 ; increment our counter
    hatch-electrons 1 [
      set color orange - 2
      ; random ycor (the height of the wire is - 16 to 16)
      setxy (max-pxcor - random-float 1) ((random 33 - 16) + random-float 1 - .5)
      set heading (random 271) + 135
      set speed random-float 1
    ]
    die
  ]

  ; If we're going to run into a nuclei, calculate the results of the collision
  let pheat speed
  ifelse not any? nuclei in-cone dist 140 [
    ; if we aren't colliding, then we get pulled toward the cathode
    let delta (subtract-headings heading 270)
    let wdelta (delta * speed) / ( voltage + speed )
    set heading 270 + wdelta
    set speed speed + voltage
  ][
    ; rules for collsion
    let the-collider one-of nuclei in-cone dist 140
    face the-collider
    move-to the-collider
    set heading heading - 180
    fd 1
    ask patch-here [
      set temp temp + 10 * (pheat) ^ 2
    ] ; temp is proportional to square of speed
    fd .6
    set speed ( speed / 10 )
    ; denotes inelastic collision - electron loses its velocity after collision
  ]

  ; We have to be a little careful here because electrons on the far right of the wire can actually
  ; go "off the wire" to the right where there are no patches
  let my-next-patch patch-ahead speed
  if my-next-patch != nobody [
    ; if an electron is about to go off the top/bottom of the wire, wrap.
    if self = subject [ pen-up ]
    if [pycor] of my-next-patch > 16  [set ycor -16 ]
    if [pycor] of my-next-patch < -16 [ pen-up set ycor 16  ]
    if self = subject [ pen-down ]
  ]

  fd speed ; move forward
end

; a procedure to color a patch based on its temperature
to recolor ; patch procedure
  set pcolor scale-color grey temp -40 100
end

; this procedure defines how temperature is spread from a patch to its neighbors
to spread-temp ; patch procedure
  let your-neighbors nobody

  ask wire-patches [
    ; if the share-heat-across slices is ON, then we consider all neighbors
    ifelse share-heat-across-slices? [
      set your-neighbors neighbors with [ slice-num > 0 ]
    ][
      ; otherwise, we only consider neighbors that are in our slice
      set your-neighbors (neighbors with [ slice-num = [slice-num] of myself])
    ]

    ; if this patch is on the edge, it also has a neighbor on the other side of the wire
    ;  this is because the wire is a cylinder
    if abs pycor = 16 [
      ask your-neighbors with [ abs pycor = 16 ] [
        set your-neighbors (patch-set your-neighbors (patch pxcor (- pycor)))
      ]
      set your-neighbors (patch-set your-neighbors (patch pxcor (- pycor)))
    ]

    ; update the temperature and the patch color
    set temp temp + (diffusion-factor * (((sum [temp] of your-neighbors) / count your-neighbors) - temp))
  ]
end

; Helper procedure to label your slice based on the model options
to update-my-slice-label ; student procedure
  let slice-width right-bound - left-bound
  let r round right-bound
  let middle round ((right-bound + left-bound) / 2)

  ; either display a user-name or a slice #
  let short-name substring user-name 0
    ifelse-value (round (slice-width / 4) + 1) > length user-name
      [ length user-name ]
      [ (round (slice-width / 4) + 1) ]

  ; reset the labels
  ask patches with [ pxcor = (middle + 1) and pycor = 20] [ set plabel "" ]
  ask patches with [ pxcor = r - 1 and pycor = 20] [ set plabel "" ]

  ; now place the labels
  ifelse not identify-students? [
    ask patches with [ pxcor = (middle + 1) and pycor = 20] [ set plabel (word "#" [slice-id] of myself) ]
  ] [
    ask patches with [ pxcor = r - 1 and pycor = 20] [ set plabel short-name ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;
; HubNet Procedures ;
;;;;;;;;;;;;;;;;;;;;;

; this is the main procedure that deals with receiving HubNet messages
to listen-to-clients
  ; If there is a HubNet message waiting to be processed
  if hubnet-message-waiting? [
    ; fetch them one at a time
    hubnet-fetch-message

    ; handle them based on the type of message
    ; If it's a log-in message, create a new student-observer
    ifelse hubnet-enter-message? [
      create-new-student-observer
    ][
      ; If this is a log-out we vacate our turtle
      ifelse hubnet-exit-message? [
        ask students with [ user-name = hubnet-message-source ] [ set user-name "" ]
      ][
        ; If it's a mouse up, we lookup the selected-mouse-option and then do the appropriate operation
        ifelse hubnet-message-tag = "Mouse Up" [
        ask students with [ user-name = hubnet-message-source ] [
          let clicked-patch patch (item 0 hubnet-message) (item 1 hubnet-message)
          move-a-nucleus clicked-patch
        ]
      ][
          ; If they pressed the label button, then pick an electron to label
          if hubnet-message-tag = "label-an-electron" [
            ask students with [ user-name = hubnet-message-source ] [
              label-electron-in-my-slice
            ]
          ]
        ]
      ]
    ]
  ]
end

to move-a-nucleus [ clicked-patch ] ; student procedure
  if member? clicked-patch my-patches [
    ; if we don't have a selected nuclei and there's one here, select it
    ifelse selected-nuclei = nobody and any? [nuclei-here] of clicked-patch [
      set selected-nuclei one-of [nuclei-here] of clicked-patch
    ][
      ; if we have one selected, and it's where we clicked, deselect it
      ifelse selected-nuclei != nobody and any? [nuclei-here] of clicked-patch [
        if member? selected-nuclei [nuclei-here] of clicked-patch [ set selected-nuclei nobody ]
      ][
        ; if there is a nuclei already selected, place it on the clicked patch
        if selected-nuclei != nobody [
          ask clicked-patch [ sprout-a-nucleus ]
          ask selected-nuclei [ die ]
          set selected-nuclei nobody
        ]
      ]
    ]
  ]

  ; recolor all of the nuclei in our slice
  hubnet-send-override user-name (nuclei-on my-patches) "color" [ [color] of myself ]
  ; highlight the selected nuclei
  if selected-nuclei != nobody [ hubnet-send-override user-name selected-nuclei "color" [ yellow ] ]
end

; procedure to send temperatures and updates to the connected clients
to send-stats-to-students
  ask students [
    if watched-electron != nobody and member? [patch-here] of watched-electron my-patches [
      hubnet-send-override user-name watched-electron "label" [ precision speed 1 ]
    ]
    set my-average-temp round mean [ temp ] of my-patches
    ; If a turtle is connected to a client, send it the temp info
    if user-name != "" [
      ifelse show-temps? [ hubnet-send user-name "avg temp" my-average-temp ] [ hubnet-send user-name "avg temp" "hidden" ]
      hubnet-send user-name "timer" ticks / 50
    ]
  ]
end

; here we have a procedure that controls labeling an electron in a client interface
to label-electron-in-my-slice ; student procedure
  ; if there's already a labeled electron, remove its label
  if watched-electron != nobody [ hubnet-send-override user-name watched-electron "label" [ "" ] ]
  ; pick an electron as far right as possible and label it
  set watched-electron max-one-of electrons-on my-patches [ xcor ]
  hubnet-send-override user-name watched-electron "color" [ yellow - 1 ]
  hubnet-send-override user-name watched-electron "label" [ precision speed 1 ]
end

; helper procedure to generate a new nuclei
to sprout-a-nucleus ; nuclei procedure
  sprout-nuclei 1 [
    set size 2
    set shape "circle 2"
    set color blue

    ; Because the nuclei are size 2, we make sure none are on the border
    if (ycor = 16)  [ set ycor 15 ]
    if (ycor = -16) [ set ycor -15 ]
  ]
end

; Helper procedure to officially add a HubNet client to the model
to create-new-student-observer
  ; If there is a free wire slice, we can login; otherwise, we have to kick the incoming client
  ifelse not any? students with [ user-name = "" ] [
    user-message "There is no more space in the wire!\nYou may want to change the 'num-students' slider\nand then re-setup."
    hubnet-kick-client hubnet-message-source
  ][
    ; If there's room, assign to an open slice
    ask one-of students with [ user-name = "" ] [
      set user-name hubnet-message-source
      initialize-hubnet-client
      update-my-slice-label
    ]
  ]
end


; Procedure to reset all of the options for a HubNet client
to initialize-hubnet-client ; turtle procedure
  ; Reset HubNet Options for this student
  set watched-electron nobody
  set selected-nuclei nobody

  ; Send the new interface options to the client
  hubnet-clear-overrides user-name
  hubnet-send-follow user-name self ifelse-value 18 > (round (abs(left-bound - right-bound)) / 2) [18] [ (round (abs(left-bound - right-bound)) / 2) ]
  hubnet-send-override user-name (nuclei-on my-patches) "color" [ [color] of myself ]
  hubnet-send user-name "slice" (word "#" slice-id)
end

;;;;;;;;;;;;;
; Reporters ;
;;;;;;;;;;;;;

; Report back the name of the user with the highest slice temperature
to-report get-leader
  ifelse show-temps? [
    let the-leader max-one-of students [ my-average-temp ]
    ifelse identify-students? [
      ifelse [user-name] of the-leader != "" [
        report [user-name] of the-leader
      ][
        report "Computer"
      ]
    ] [
      report (word "Slice #" [slice-id] of the-leader)
    ]
  ][
   report "hidden"
  ]
end

; Report back the temperature of any given student
to-report get-student-temp [ num ]
  ifelse show-temps?
  [ report [my-average-temp] of one-of students with [ slice-id = num ] ]
  [ report "hidden" ]
end

; Report back the highest slice temperature
to-report get-leading-temp
  ifelse show-temps?
  [ report [my-average-temp] of max-one-of students [ my-average-temp] ]
  [ report "hidden" ]
end


; Copyright 2008 Pratim Sengupta and Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <widgets>
    <view x="233" maxPycor="25" updateMode="1" wrappingAllowedX="false" y="12" frameRate="30.0" minPycor="-25" height="264" showTickCounter="true" patchSize="5.0" fontSize="14" wrappingAllowedY="true" width="863" tickCounterLabel="ticks" maxPxcor="85" minPxcor="-85"></view>
    <button x="5" y="130" height="40" disableUntilTicks="false" forever="false" kind="Observer" width="200">setup</button>
    <button x="100" y="175" height="35" disableUntilTicks="true" forever="true" kind="Observer" width="105">go</button>
    <slider x="5" step="0.01" y="220" height="33" min="0.01" direction="Horizontal" max="0.2" default="0.1" variable="voltage" width="200" display="voltage"></slider>
    <button x="6" y="382" height="33" disableUntilTicks="true" forever="false" kind="Observer" width="200" display="Watch An Electron"><![CDATA[ask one-of electrons with [ xcor > max-pxcor - 5 ] [
    set color yellow
    pen-down
    watch-me
]]]></button>
    <button x="6" y="416" height="33" disableUntilTicks="true" forever="false" kind="Observer" width="200" display="Stop Watching and Erase">ask electrons [ pen-up set color orange - 2]
reset-perspective
clear-drawing</button>
    <monitor x="760" precision="17" y="460" height="57" fontSize="14" width="221" display="Electrons Arrived at Cathode">charge-flow</monitor>
    <monitor x="1105" precision="2" y="55" height="53" fontSize="13" width="110" display="Timer">ticks / 50</monitor>
    <plot x="480" yMax="100.0" yAxis="Current" y="460" xMin="0.0" height="171" legend="false" xMax="10.0" autoplot="true" yMin="0.0" width="278" xAxis="Time (Seconds)" display="Current vs Time">
      <setup></setup>
      <update></update>
      <pen color="-16777216" legend="true" interval="1.0" mode="0" display="default">
        <setup></setup>
        <update><![CDATA[if ticks > 5 [ plotxy (ticks / 50) (50 * charge-flow) / ticks ]]]></update>
      </pen>
    </plot>
    <slider x="5" step="0.01" y="254" height="33" min="0" direction="Horizontal" max="0.1" default="0.05" variable="diffusion-factor" width="200" display="diffusion-factor"></slider>
    <plot x="215" yMax="100.0" yAxis="Temp (0-100)" y="460" xMin="0.0" height="170" legend="false" xMax="10.0" autoplot="true" yMin="0.0" width="250" xAxis="Time (Seconds)" display="Average Temperature Plot">
      <setup></setup>
      <update></update>
      <pen color="-16777216" legend="true" interval="1.0" mode="0" display="default">
        <setup></setup>
        <update>plotxy (ticks / 50) mean [temp] of wire-patches</update>
      </pen>
    </plot>
    <monitor x="1105" precision="2" y="330" height="57" fontSize="14" width="110" display="Avg. Temp">mean [my-average-temp] of students</monitor>
    <slider x="5" step="1" y="50" height="33" min="1" direction="Horizontal" max="25" default="15.0" variable="nuclei-per-slice" units="nuclei" width="200" display="nuclei-per-slice"></slider>
    <monitor x="1105" precision="17" y="175" height="53" fontSize="13" width="110" display="with a temp of">get-leading-temp</monitor>
    <monitor x="1105" precision="1" y="115" height="53" fontSize="13" width="110" display="Leader is">get-leader</monitor>
    <switch x="5" y="495" height="33" on="true" variable="show-temps?" width="200" display="show-temps?"></switch>
    <button x="5" y="175" height="35" disableUntilTicks="true" forever="false" kind="Observer" width="90" display="go once">go</button>
    <switch x="5" y="295" height="33" on="false" variable="share-heat-across-slices?" width="200" display="share-heat-across-slices?"></switch>
    <button x="6" y="336" height="33" disableUntilTicks="true" forever="false" kind="Observer" width="200" display="Reset All Temperatures">  if user-yes-or-no? "Are you sure you want to reset all\ntemperatures back to 20 Temp Units?" [
    ask wire-patches [
      set temp 20
      recolor
    ]
  ]</button>
    <slider x="5" step="1" y="90" height="33" min="3" direction="Horizontal" max="10" default="3.0" variable="num-students" units="students" width="200" display="num-students"></slider>
    <plot x="216" yMax="30.0" yAxis="Temperature" y="282" xMin="1.0" height="171" legend="false" xMax="1.0" autoplot="true" yMin="0.0" width="885" xAxis="Slice #" display="Temperature in each Slice">
      <setup></setup>
      <update>clear-plot
if not show-temps? [ stop ]
if any? students [ set-plot-x-range 1 (count students + 1) set-plot-y-range 0 ([my-average-temp] of max-one-of students [my-average-temp]) + 15 ]</update>
      <pen color="-14835848" legend="true" interval="1.0" mode="1" display="slice-1">
        <setup></setup>
        <update>plotxy 1 get-student-temp 1</update>
      </pen>
      <pen color="-7500403" legend="true" interval="1.0" mode="1" display="slice-2">
        <setup></setup>
        <update><![CDATA[if count students > 1 [ plotxy 2 get-student-temp 2 ]]]></update>
      </pen>
      <pen color="-2674135" legend="true" interval="1.0" mode="1" display="slice-3">
        <setup></setup>
        <update><![CDATA[if count students > 2 [ plotxy 3 get-student-temp 3 ]]]></update>
      </pen>
      <pen color="-955883" legend="true" interval="1.0" mode="1" display="slice-4">
        <setup></setup>
        <update><![CDATA[if count students > 3 [ plotxy 4 get-student-temp 4 ]]]></update>
      </pen>
      <pen color="-6459832" legend="true" interval="1.0" mode="1" display="slice-5">
        <setup></setup>
        <update><![CDATA[if count students > 4 [ plotxy 5 get-student-temp 5 ]]]></update>
      </pen>
      <pen color="-13791810" legend="true" interval="1.0" mode="1" display="slice-6">
        <setup></setup>
        <update><![CDATA[if count students > 5 [ plotxy 6 get-student-temp 6 ]]]></update>
      </pen>
      <pen color="-10899396" legend="true" interval="1.0" mode="1" display="slice-7">
        <setup></setup>
        <update><![CDATA[if count students > 6 [ plotxy 7 get-student-temp 7 ]]]></update>
      </pen>
      <pen color="-11221820" legend="true" interval="1.0" mode="1" display="slice-8">
        <setup></setup>
        <update><![CDATA[if count students > 7 [ plotxy 8 get-student-temp 8 ]]]></update>
      </pen>
      <pen color="-2064490" legend="true" interval="1.0" mode="1" display="slice-9">
        <setup></setup>
        <update><![CDATA[if count students > 8 [ plotxy 9 get-student-temp 9 ]]]></update>
      </pen>
      <pen color="-8630108" legend="true" interval="1.0" mode="1" display="slice-10">
        <setup></setup>
        <update><![CDATA[if count students > 9 [ plotxy 10 get-student-temp 10 ]]]></update>
      </pen>
    </plot>
    <switch x="5" y="535" height="33" on="false" variable="identify-students?" width="200" display="identify-students?"></switch>
    <button x="5" y="10" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="200" display="Complete Reset">startup</button>
  </widgets>
  <info><![CDATA[## WHAT IS IT?

This model is an extension of the _Current in a Wire_ model that adds two elements: temperature and HubNet interactivity. Just like _Current in a Wire_, this model visualizes the flow of electrons, caused by a voltage difference between two ends of a wire. The electrons are constantly accelerated by the applied voltage meaning they acquire some kinetic energy as they move towards the positive end of the wire. However, as they flow, the electrons collide with the nuclei of the material the wire is made of, in other words, they encounter _resistance_. In these collisions, some of the kinetic energy of the electrons is transformed into heat energy which is absorbed by the wire.

Because this is a HubNet model, a number of "clients" or students connect to this model via the **HubNet Client Launcher**. Every client that is connected gets to "control" a slice of the wire by placing and removing the nuclei that electrons collide with in their slice. Through a series of activities, students both interact and experiment with the idea that many macro-level phenomena like current and resistance are emergent–that they arise due to simple interactions between many micro-level objects like atoms and electrons.

## HOW IT WORKS

The wire in this model (the patches which aren't black) is composed of atoms, which in turn are made of negatively charged electrons and positively charged nuclei.  According to the Bohr model of the atom, these electrons revolve in concentric shells around the nucleus. However, in each atom, the electrons that are farthest away from the nucleus (i.e., the electrons that are in the outermost shell of each atom) behave as if they are free from the nuclear attraction. Here we represent electrons as tiny orange-colored circles.

Voltage in the wire gives rise to a constant electric field throughout the wire, imparting a steady drift to the electrons toward the positive side of the wire or the _cathode_.  In addition to this drift, the electrons also collide with the atomic nuclei that make up the wire, giving rise to electrical resistance. The nuclei are the blue circles shown in the wire that in this model causes the electrons to go around them.

When an electron collides with a nuclei, its kinetic energy is transformed into heat which is absorbed by the wire. We visualize the temperature of the wire by coloring the patches that represent the wire by how warm they are.  The warmer the patch, the closer to white its color will be. The cooler the patch, the closer to a dark-grey it will be.

The wire is divided into many "slices" so that each HubNet Client can monitor and control a single slice of the wire. Within each slice, students can click on nuclei to remove them or create a new nuclei on some other patch. In this manner, the students can control the location of the nuclei in their slice and see what the relationship is between that structure, collisions, and the temperature of their slice.

## HOW TO USE IT

When the model opens, the teacher or activity leader needs to first select the number of students that will connect by using the NUM-STUDENTS slider. They also need to select how many nuclei will be present in each slice using the NUCLEI-PER-SLICE slider. Once those two options are selected, hit the SETUP button.

The COMPLETE RESET button should only be used as a last resort because it will disconnect all students who are currently connected.

Then ask however many students you have selected to join through the HubNet Client application. If the model is not listed in the bottom of the login window, make sure to provide students with the correct IP address and port number for your model. After all students have joined, the teacher starts the model by clicking the GO button.

In addition to the NUM-STUDENTS and NUCLEI-PER-SLICE sliders, there are several other interface elements the teacher or activity leader can control in order to change the behavior of the model:

  * The VOLTAGE slider controls the voltage or the electric potential difference between the cathode and anode of the wire.
  * The DIFFUSION-FACTOR slider controls how much heat flows from one wire patch to its neighbors
  * The SHARE-TEMP-ACROSS-SLICES? switch controls whether or not heat can diffuse from one wire slice to another
  * The RESET ALL TEMPERATURES button, when clicked, sets the temperature of all patches in the wire back to their original values
  * The WATCH AN ELECTRON button, when clicked, causes the model to `follow` a single electron and visualize its path as it flows through the wire
  * The STOP WATCHING AND ERASE button, when clicked, causes the model to cease following an electron and also erases any paths left on the view

The teacher or activity leader can also control two different aspects of the HubNet part of the model:

  * The SHOW-TEMP? switch, controls whether or not the temperatures of the wire slices and the average temperature of the wire are shown (both in this model and the client interfaces)
  * The IDENTIFY-STUDENTS? switch, if on, labels all the slices with the `user-name` of the connected HubNet client who is controlling that slice (otherwise, the slices are just identified by an ID number).

Finally, there are a number of different monitors and plots:

  * The TIMER monitor shows how long the simulation has been running in "model time"
  * The HIGHEST SLICE TEMPERATURE monitor shows the current temperature of the hottest wire slice
  * The LEADER monitor shows which HubNet Client's slice has the current highest temperature (if a slice that doesn't have a client connected is hottest, it will just display "Computer"
  * The AVG. TEMP OVER ALL SLICES monitor displays the average temperature of the entire wire
  * The ELECTRONS ARRIVED AT CATHODE monitor displays the number of electrons that have flowed past the cathode of the wire
  * The TEMPERATURE IN EACH SLICE plot displays a histogram where each bar's height represents the current temperature in that slice
  * The AVERAGE TEMPERATURE plot displays the average temperature since the beginning of the simulation
  * The CURRENT VS. TIME plot displays the electrical current that has been measured from the wire since the beginning of the simulation

### Client Interface Elements

The Client Interface has a few different features that give HubNet Clients a few different options for interaction:

  * Each Client's View is limited to just their slice of the wire
  * The SLICE monitor shows the slice id that the client has been assigned so that they know which slice in the wire they are controlling
  * The AVG TEMP monitor shows the current temperature of the slice the client is controlling
  * The LABEL-AN-ELECTRON button picks an electron in the students slice and labels it with its speed so that a student can investigate how the collisions affect a single electron's speed as it travels through the wire
  * The nuclei that are located in the student's slice will be colored according to the color of the histogram bar that student's average temperature is displayed in instead of the default blue color
  * To move nuclei around, student simply click on one of the nuclei in their slice (it will be highlighted in yellow to indicate it has been selected) and then click on a patch in their slice they would like to move it to

## THINGS TO NOTICE

What happens to the movement of the electrons as VOLTAGE changes?

Notice the change of speed and movement of electrons as they collide with nuclei.

Notice that there's a relationship between the speed of the electrons as they collide and the heat the patches near this collision absorb. Watch the collisions and see if you can figure out what the relationship is. Once you have a guess, switch over to the Code Tab and see if you can find the code where this heat energy is produced and absorbed.

Are there certain formations of nuclei that seem to cause collisions that cause more heating than others?

How does increasing the DIFFUSION-FACTOR affect the spread of temperature across the wire?

## THINGS TO TRY

This model was designed for students (clients) to play three different games:

### Game 1

The goal in this game is for students to maximize the temperature in their slice of the wire. For this game, the teacher should set the SHARE-HEAT-ACROSS-SLICES? switch to the OFF position.

Once everything is setup, allow students to join and ask them to try out different strategies for maximizing the temperature in their slice. Also ask them to write down what their strategy is once they settle on one.

#### Sample Strategies and Reasoning
  1. Far-end arrangement
    * "Maybe more travel time for electrons will result in more heat"
  2. Clustering arrangement
    * "More collisions will result in more heat"

### Game 2

Game 2 is similar to Game 1, the only difference being that the SHARE-HEAT-ACROSS-SLICES? switch should be in the ON position. The teacher should also remind the students what this changes about the model.

Again, ask students to come up with a good strategy to maximize temperature and write it down. If their strategy changed from Game 1, ask them why they thought they needed to change strategies.

#### Sample Strategies and Reasoning
  1. Far-end arrangement
    * "Maybe more travel time for electrons will result in more heat"
  2. Arrangement is responsive to the right-adjacent slice (move nuclei inward from the left edge)
    * "Temperature gets up faster if it does not spill into the next slice"

### Game 3

Game 3 is the same as Game 2, except for in this game, the Teacher should allow all the students to see the main model.

#### Sample Strategies and Reasoning
  1. Hybrid strategy: Far-end + Cluster
    * "More travel time for electrons will result in more heat"
  2. Arrangement is responsive to the right-adjacent slice
    * "More collisions will result in more heat"

### After the Games
After students complete the three games, conduct a group discussion in which students discuss their strategies for maximizing temperature in their slice for Games 1, 2 and 3.

Following this group discussion, review the following with the students:
  * Mechanism of resistance
  * Relationship between collisions, heat, and light
  * Flow of electrons in a wire.

## EXTENDING THE MODEL

Currently the model randomly places nuclei within each slice of the wire. In real wires, the nuclei are much more structured. Try writing a procedure that places the nuclei in specific formations that represent a real world material.

Right now, students can only ever see their slice of the wire. See if you can add an option in the Client Interface to "peek" at the whole wire.

## NETLOGO FEATURES

This model uses the `hubnet-send-follow` primitive to give students a local view of a part of the system.

## RELATED MODELS

Checkout the other NIELS curricular models, including:

* Current in a Wire
* Electron Sink
* Electrostatics
* Parallel Circuit
* Series Circuit

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Sengupta, P., Brady, C., Bain, C. and Wilensky, U. (2008).  NetLogo Current in a Wire HubNet model.  http://ccl.northwestern.edu/netlogo/models/CurrentinaWireHubNet.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the HubNet software as:

* Wilensky, U. & Stroup, W. (1999). HubNet. http://ccl.northwestern.edu/netlogo/hubnet.html. Center for Connected Learning and Computer-Based Modeling, Northwestern University. Evanston, IL.

To cite the NIELS curriculum as a whole, please use:

* Sengupta, P. and Wilensky, U. (2008). NetLogo NIELS curriculum. http://ccl.northwestern.edu/NIELS/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2008 Pratim Sengupta and Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

To use this model for academic or commercial research, please contact Pratim Sengupta at <pratim.sengupta@vanderbilt.edu> or Uri Wilensky at <uri@northwestern.edu> for a mutual agreement prior to usage.

<!-- 2008 NIELS Cite: Sengupta, P., Brady, C., Bain, C. -->]]></info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="anode" rotatable="false" editableColorIndex="14">
      <rectangle endX="255" startY="0" marked="false" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="285" startY="0" marked="false" color="-1920102913" endY="300" startX="30" filled="false"></rectangle>
      <rectangle endX="285" startY="0" marked="false" color="-684578305" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="false" color="-303222273" endY="300" startX="0" filled="false"></rectangle>
    </shape>
    <shape name="arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="0" y="150"></point>
        <point x="105" y="150"></point>
        <point x="105" y="293"></point>
        <point x="195" y="293"></point>
        <point x="195" y="150"></point>
        <point x="300" y="150"></point>
      </polygon>
    </shape>
    <shape name="atom-pusher" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
      <rectangle endX="285" startY="15" marked="true" color="-1920102913" endY="30" startX="15" filled="false"></rectangle>
      <rectangle endX="285" startY="15" marked="true" color="-1920102913" endY="30" startX="15" filled="true"></rectangle>
      <rectangle endX="15" startY="15" marked="true" color="-1920102913" endY="30" startX="15" filled="true"></rectangle>
      <rectangle endX="15" startY="0" marked="true" color="-1920102913" endY="30" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="30" startX="285" filled="true"></rectangle>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="cathode" rotatable="false" editableColorIndex="0">
      <rectangle endX="285" startY="0" marked="false" color="878553599" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="285" startY="0" marked="false" color="-303222273" endY="300" startX="0" filled="false"></rectangle>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="-45" y="-45" marked="true" color="-1920102913" diameter="180" filled="false"></circle>
      <circle x="-2" y="-2" marked="false" color="255" diameter="304" filled="false"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="2">
      <circle x="0" y="0" marked="false" color="255" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="true" color="-244705793" diameter="240" filled="true"></circle>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="cylinder" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="line half" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="150" startX="150"></line>
    </shape>
    <shape name="link" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="link direction" rotatable="true" editableColorIndex="0">
      <line endX="30" startY="150" marked="true" color="-1920102913" endY="225" startX="150"></line>
      <line endX="270" startY="150" marked="true" color="-1920102913" endY="225" startX="150"></line>
    </shape>
    <shape name="minus" rotatable="false" editableColorIndex="14">
      <rectangle endX="300" startY="90" marked="false" color="-1" endY="210" startX="0" filled="true"></rectangle>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="plus" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="0" marked="false" color="-1" endY="300" startX="105" filled="true"></rectangle>
      <rectangle endX="300" startY="105" marked="false" color="-1" endY="195" startX="0" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <hubNetClient>
    <view x="9" maxPycor="25" updateMode="1" wrappingAllowedX="true" y="10" frameRate="30.0" minPycor="-25" height="513" showTickCounter="true" patchSize="12.0" fontSize="13" wrappingAllowedY="true" width="513" tickCounterLabel="ticks" maxPxcor="85" minPxcor="-85"></view>
    <monitor x="430" precision="3" y="530" height="49" fontSize="11" width="90" display="avg temp"></monitor>
    <monitor x="105" precision="3" y="530" height="49" fontSize="11" width="92" display="slice"></monitor>
    <monitor x="10" precision="3" y="530" height="49" fontSize="11" width="90" display="timer"></monitor>
    <button x="200" y="530" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="225" display="label-an-electron"></button>
  </hubNetClient>
  <previewCommands>need-to-manually-make-preview-for-this-model</previewCommands>
</model>
