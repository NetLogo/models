<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0.0" snapToGrid="true">
  <code><![CDATA[globals [
  tick-delta                        ; how much we advance the tick counter this time through
  max-tick-delta                    ; the largest tick-delta is allowed to be
  init-avg-speed init-avg-energy    ; initial averages
  avg-speed avg-energy              ; current average
  avg-energy-green                  ; average energy of green particles (used to calculate the temperature)
  avg-energy-orange                 ; average energy of orange particles (used to calculate the temperature)
  avg-energy-purple                 ; average energy of purple (violet) particles (used to calculate the temperature)
  toggle-red-state                  ; keeps track of whether the toggle red wall button was pressed (and whether these walls are open or closed)
  toggle-blue-state                 ; keeps track of whether the toggle blue wall button was pressed (and whether these walls are open or closed)
  particles-to-add                  ; number of particles to add when using the mouse / cursor to add particles
  min-particle-energy
  max-particle-energy
  particle-size
  sensor-colors                     ; colors for each of the numbered sensor types
  sensor-placed?                    ; flag to avoid placing > 1 sensors per click
]

breed [ particles particle ]
breed [ walls wall ]
breed [ flashes flash ]
breed [ erasers eraser ]
breed [ arrowheads arrowhead ]
breed [ sensors sensor ]

erasers-own [ pressure? ]
flashes-own [ birthday ]
sensors-own [ my-call number reading my-history light-up-threshold index ]

particles-own [
  speed mass energy          ; particles info
  last-collision
  color-type                 ; type of particle (green, orange, purple)
]

walls-own [
  energy
  valve-1?
  valve-2?
  pressure?
  surface-energy
]

to startup
  setup
end

to setup
  clear-all
  set particle-size 1.0
  set max-tick-delta 0.02
  set particles-to-add 2
  set-default-shape flashes "square"
  set-default-shape walls "wall"
  set-default-shape erasers "eraser"
  set-default-shape arrowheads "default"
  set-default-shape sensors "sensor"
  set min-particle-energy 0
  set max-particle-energy 10000

  create-erasers 1 [ set hidden? true set pressure? true set size 3 set color white ]
  set sensor-colors [ black orange magenta sky brown ]
  set sensor-placed? false

  make-box
  make-particles

  ask particles [ update-particle-speed-visualization ]

  set init-avg-speed avg-speed
  set init-avg-energy avg-energy

  update-variables
  setup-plots
  reset-ticks
end

to init-time
  ask flashes [ die ]
  ask sensors [
    set reading 0
    set my-history []
  ]
  clear-all-plots
  reset-ticks
end


to go
  mouse-action
  sensor-action
  if mouse-interaction = "none - let particles move"  [
    ask particles [ bounce ]
    ask particles [ move ]
    ask particles [ check-for-collision ]
    ask particles with [any? walls-here] [ rewind-to-bounce ]
    ask particles with [any? walls-here] [ remove-from-walls ]
  ]
  tick-advance tick-delta
  calculate-tick-delta

  ask flashes [ update-flash-visualization ]
  ask particles [ update-particle-speed-visualization ]

  update-variables
  update-plots
  display
end


to sensor-action
  ask sensors [
   let command-name (word "code" number)
   let command run-result command-name
   carefully [
     run command
   ][ user-message (word "oops:  " error-message "  in running " command) ]
   ifelse reading >= light-up-threshold [
     set color item number sensor-colors + 3.5
   ][
     set color item number sensor-colors
   ]
   set label (word reading "       ")
  ]
end

;sensor procedure - add this to my-history
to record [ a-value ]
  set my-history lput a-value my-history
end



to update-variables
  if any? particles [
    set avg-speed  mean [speed] of particles
    set avg-energy mean [energy] of particles
  ]
  if any? particles with [color-type = green] [
    set avg-energy-green mean [energy] of particles with [color-type = green]
  ]
  if any? particles with [color-type = orange] [
    set avg-energy-orange mean [energy] of particles with [color-type = orange]
  ]
  if any? particles with [color-type = violet] [
    set avg-energy-purple mean [energy] of particles with [color-type = violet]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;WALL INTERACTION;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to toggle-red-wall
  ifelse toggle-red-state = "closed" [
    ask walls with [valve-1?] [ set hidden? true ]
    set toggle-red-state "open"
  ][
    ask walls with [valve-1?] [ set hidden? false ]
    set toggle-red-state "closed"
  ]
end

to toggle-blue-wall
  ifelse toggle-blue-state = "closed" [
    ask walls with [valve-2?] [ set hidden? true ]
    set toggle-blue-state "open"
  ][
    ask walls with [valve-2?] [ set hidden? false ]
    set toggle-blue-state "closed"
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;GAS MOLECULES MOVEMENT;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to bounce
  let this-patch patch-here
  let new-px 0
  let new-py 0
  let hit-angle 0
  let visible-wall nobody
   ; get the coordinates of the patch we'll be on if we go forward 1
  let bounce-patch  min-one-of walls in-cone ((sqrt (2)) / 2) 180 with [myself != this-patch] [ distance myself ]

  if bounce-patch != nobody [
    set new-px [pxcor] of bounce-patch
    set new-py [pycor] of bounce-patch
    set visible-wall walls-on bounce-patch

    if any? visible-wall with [not hidden?]  [
      set hit-angle towards bounce-patch
      ifelse (hit-angle <= 135 and hit-angle >= 45) or (hit-angle <= 315 and hit-angle >= 225) [
        set heading (- heading)
      ][
        set heading (180 - heading)
      ]
      if show-wall-hits? [
        ask patch new-px new-py [ make-a-flash ]
      ]
    ]
  ]
end




to rewind-to-bounce  ; particles procedure
  ; attempts to deal with particle penetration by rewinding the particle path back to a point
  ; where it is about to hit a wall
  ; the particle path is reversed 49% of the previous tick-delta it made,
  ; then particle collision with the wall is detected again.
  ; and the particle bounces off the wall using the remaining 51% of the tick-delta.
  ; this use of slightly more of the tick-delta for forward motion off the wall, helps
  ; insure the particle doesn't get stuck inside the wall on the bounce.

  let bounce-patch nobody
  let bounce-patches nobody
  let hit-angle 0
  let this-patch nobody
  let new-px 0
  let new-py 0
  let visible-wall nobody

  back (speed) * tick-delta * .49
  set this-patch  patch-here

  set bounce-patch  min-one-of walls in-cone ((sqrt (2)) / 2) 180 with [self != this-patch] [ distance myself ]

  if bounce-patch != nobody [
    set new-px [pxcor] of bounce-patch
    set new-py [pycor] of bounce-patch
    set visible-wall walls-on bounce-patch

    if any? visible-wall with [not hidden?] [
      set hit-angle towards bounce-patch
      ifelse (hit-angle <= 135 and hit-angle >= 45) or (hit-angle <= 315 and hit-angle >= 225) [
        set heading (- heading)
      ][
        set heading (180 - heading)
      ]

      if show-wall-hits? [
        ask patch new-px new-py [
          sprout-flashes 1 [
            set color gray - 2
            set birthday ticks
          ]
        ]
      ]
    ]
  ]
  fd (speed) * tick-delta * .51
end


to move  ; particles procedure
  if patch-ahead (speed * tick-delta) != patch-here [ set last-collision nobody ]
  jump (speed * tick-delta)
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;GAS MOLECULES COLLISIONS;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;from GasLab

to calculate-tick-delta
  ; tick-delta is calculated in such way that even the fastest
  ; particles will jump at most 1 patch delta in a ticks tick. As
  ; particles jump (speed * tick-delta) at every ticks tick, making
  ; tick delta the inverse of the speed of the fastest particles
  ; (1/max speed) assures that. Having each particles advance at most
   ; one patch-delta is necessary for it not to "jump over" a wall
   ; or another particles.
  ifelse any? particles with [speed > 0] [
    set tick-delta min list (1 / (ceiling max [speed] of particles )) max-tick-delta
  ][
    set tick-delta max-tick-delta
  ]
end


to check-for-collision  ; particles procedure
  ; Here we impose a rule that collisions only take place when there
  ; are exactly two particles per patch.  We do this because when the
  ; student introduces new particles from the side, we want them to
  ; form a uniform wavefront.
  ;
  ; Why do we want a uniform wavefront?  Because it is actually more
  ; realistic.  (And also because the curriculum uses the uniform
  ; wavefront to help teach the relationship between particles collisions,
  ; wall hits, and pressure.)
  ;
  ; Why is it realistic to assume a uniform wavefront?  Because in reality,
  ; whether a collision takes place would depend on the actual headings
  ; of the particles, not merely on their proximity.  Since the particles
  ; in the wavefront have identical speeds and near-identical headings,
  ; in reality they would not collide.  So even though the two-particles
  ; rule is not itself realistic, it produces a realistic result.  Also,
  ; unless the number of particles is extremely large, it is very rare
  ; for three or  particles to land on the same patch (for example,
  ; with 400 particles it happens less than 1% of the time).  So imposing
  ; this additional rule should have only a negligible effect on the
  ; aggregate behavior of the system.
  ;
  ; Why does this rule produce a uniform wavefront?  The particles all
  ; start out on the same patch, which means that without the only-two
  ; rule, they would all start colliding with each other immediately,
  ; resulting in much random variation of speeds and headings.  With
  ; the only-two rule, they are prevented from colliding with each other
  ; until they have spread out a lot.  (And in fact, if you observe
  ; the wavefront closely, you will see that it is not completely smooth,
  ; because  collisions eventually do start occurring when it thins out while fanning.)

  if count  other particles-here  in-radius 1 = 1 [
    ; the following conditions are imposed on collision candidates:
    ;   1. they must have a lower who number than my own, because collision
    ;      code is asymmetrical: it must always happen from the point of view
    ;      of just one particles.
    ;   2. they must not be the same particles that we last collided with on
    ;      this patch, so that we have a chance to leave the patch after we've
    ;      collided with someone.
    let candidate one-of other particles-here with
      [who < [who] of myself and myself != last-collision]
    ; we also only collide if one of us has non-zero speed. It's useless
    ; (and incorrect, actually) for two particles with zero speed to collide.
    if (candidate != nobody) and (speed > 0 or [speed] of candidate > 0) [
      collide-with candidate
      set last-collision candidate
      ask candidate [ set last-collision myself ]
    ]
  ]
end

; implements a collision with another particles.
;
; THIS IS THE HEART OF THE particles SIMULATION, AND YOU ARE STRONGLY ADVISED
; NOT TO CHANGE IT UNLESS YOU REALLY UNDERSTAND WHAT YOU'RE DOING!
;
; The two particles colliding are self and other-particles, and while the
; collision is performed from the point of view of self, both particles are
; modified to reflect its effects. This is somewhat complicated, so I'll
; give a general outline here:
;   1. Do initial setup, and determine the heading between particles centers
;      (call it theta).
;   2. Convert the representation of the velocity of each particles from
;      speed/heading to a theta-based vector whose first component is the
;      particle's speed along theta, and whose second component is the speed
;      perpendicular to theta.
;   3. Modify the velocity vectors to reflect the effects of the collision.
;      This involves:
;        a. computing the velocity of the center of mass of the whole system
;           along direction theta
;        b. updating the along-theta components of the two velocity vectors.
;   4. Convert from the theta-based vector representation of velocity back to
;      the usual speed/heading representation for each particles.
;   5. Perform final cleanup and update derived quantities.
to collide-with [ other-particles ] ; particles procedure
  ;; PHASE 1: initial setup

  ; for convenience, grab  quantities from other-particles
  let mass2 [mass] of other-particles
  let speed2 [speed] of other-particles
  let heading2 [heading] of other-particles

  ; since particles are modeled as zero-size points, theta isn't meaningfully
  ; defined. we can assign it randomly without affecting the model's outcome.
  let theta (random-float 360)

  ;; PHASE 2: convert velocities to theta-based vector representation

  ; now convert my velocity from speed/heading representation to components
  ; along theta and perpendicular to theta
  let v1t (speed * cos (theta - heading))
  let v1l (speed * sin (theta - heading))

  ; do the same for other-particles
  let v2t (speed2 * cos (theta - heading2))
  let v2l (speed2 * sin (theta - heading2))

  ;; PHASE 3: manipulate vectors to implement collision

  ; compute the velocity of the system's center of mass along theta
  let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )

  ; now compute the new velocity for each particles along direction theta.
  ; velocity perpendicular to theta is unaffected by a collision along theta,
  ; so the next two lines actually implement the collision itself, in the
  ; sense that the effects of the collision are exactly the following changes
  ; in particles velocity.
  set v1t (2 * vcm - v1t)
  set v2t (2 * vcm - v2t)

  ;; PHASE 4: convert back to normal speed/heading

  ; now convert my velocity vector into my new speed and heading
  set speed sqrt ((v1t ^ 2) + (v1l ^ 2))
  set energy (0.5 * mass * speed ^ 2)
  ; if the magnitude of the velocity vector is 0, atan is undefined. but
  ; speed will be 0, so heading is irrelevant anyway. therefore, in that
  ; case we'll just leave it unmodified.
  if v1l != 0 or v1t != 0 [ set heading (theta - (atan v1l v1t)) ]

  ; and do the same for other-particle
  ask other-particles [
    set speed sqrt ((v2t ^ 2) + (v2l ^ 2))
    set energy (0.5 * mass * (speed ^ 2))
    if v2l != 0 or v2t != 0 [ set heading (theta - (atan v2l v2t)) ]
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  mouse interaction procedures
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to mouse-action
  let snap-xcor 0
  let snap-ycor 0
  let orig-xcor 0
  let orig-ycor 0
  let eraser-window-walls nobody
  let eraser-window-particles nobody
  set orig-xcor mouse-xcor
  set orig-ycor mouse-ycor
  set snap-xcor round orig-xcor
  set snap-ycor round orig-ycor

  ask erasers [
    if mouse-inside? [setxy orig-xcor orig-ycor]
    ifelse mouse-down?
      [ set color [225 225 255 225] ]
      [ set color [225 225 255 150] ]
    if mouse-inside? [
      set shape "none"
      if mouse-interaction = "draw basic wall" or mouse-interaction = "draw red removable wall" or mouse-interaction = "draw blue removable wall" [
        set shape "add wall"
      ]
      if mouse-interaction = "big eraser" [
        set shape "eraser"
      ]
      if mouse-interaction = "add purple particles" or mouse-interaction = "add green particles" or mouse-interaction = "add orange particles" [
        ask erasers [ set shape "add particles" ]
      ]
      if mouse-interaction = "paint particles purple" or mouse-interaction = "paint particles green" or mouse-interaction = "paint particles orange" [
        ask erasers [ set shape "spray paint" ]
      ]
      if mouse-interaction = "speed up particles" or mouse-interaction = "slow down particles" [
        ask erasers [ set shape "spray paint" ]
      ]
    ]
    set hidden? not mouse-inside?
  ]

  ifelse mouse-down? [
    ask patches with [pxcor = snap-xcor and pycor = snap-ycor] [
      set eraser-window-walls walls-on neighbors
      set eraser-window-walls eraser-window-walls with [not pressure?]
      set eraser-window-particles particles-on neighbors

      if mouse-interaction = "draw basic wall" [
        if not any? walls-here with [color = yellow][
          ask walls-here [die]
          sprout-walls 1 [
            set color gray
            initialize-this-wall
          ]
        ]
      ]
      if mouse-interaction = "draw red removable wall"  [
        set toggle-red-state "open"
        toggle-red-wall
        if not any? walls-here with [color = yellow][
          ask walls-here [ die ]
          sprout-walls 1 [
            set color red
            initialize-this-wall set valve-1? true
          ]
        ]
      ]
      if mouse-interaction = "draw blue removable wall" [
        set toggle-blue-state "open"
        toggle-blue-wall
        if not any? walls-here with [color = yellow][
          ask walls-here [ die ]
          sprout-walls 1 [
            set color blue
            initialize-this-wall set valve-2? true
          ]
        ]
      ]

      if mouse-interaction = "add/move sensor 1"
        or mouse-interaction = "add/move sensor 2"
        or mouse-interaction = "add/move sensor 3"
        or mouse-interaction = "add/move sensor 4" [

        let existing-ones sensors with [my-call = mouse-interaction]
        ifelse (count existing-ones < 4 and sensor-placed? = false) [
          set sensor-placed? true
          sprout-sensors 1 [
            set my-call mouse-interaction
            set size 2
            set reading 0
            set my-history []
            set light-up-threshold 1
            set index count sensors with [ my-call = mouse-interaction ]
            set number position (last mouse-interaction) "01234"
            set color item number sensor-colors
          ]
        ][
          ask min-one-of existing-ones [distance myself] [
            move-to myself
          ]
        ]
      ]

      if mouse-interaction = "big eraser" [
        ask eraser-window-walls [die]
        ask eraser-window-particles [die]
      ]

      ;;; addition of particles by mouse / cursor actions ;;;;
      if mouse-interaction = "add purple particles" or mouse-interaction = "add green particles" or mouse-interaction = "add orange particles" [
        sprout particles-to-add [
          setup-particles
          jump random-float 2
          if mouse-interaction = "add purple particles" [ set color-type violet color-particle-and-link ]
          if mouse-interaction = "add orange particles" [ set color-type orange color-particle-and-link ]
          if mouse-interaction = "add green particles"  [ set color-type green  color-particle-and-link ]
          update-particle-speed-visualization
        ]
      ]

      ;;; painting (recoloring) of particles by mouse / cursor actions ;;;;
      if mouse-interaction = "paint particles purple" or mouse-interaction = "paint particles green" or mouse-interaction = "paint particles orange" [
        ask eraser-window-particles [
          if mouse-interaction = "paint particles purple" [ set color-type violet color-particle-and-link ]
          if mouse-interaction = "paint particles orange" [ set color-type orange color-particle-and-link ]
          if mouse-interaction = "paint particles green"  [ set color-type green color-particle-and-link ]
          update-particle-speed-visualization
        ]
      ]

      if mouse-interaction = "speed up particles" or mouse-interaction = "slow down particles" [
        ask eraser-window-particles [
          let max-speed 20
          if mouse-interaction = "speed up particles" [ if speed < max-speed [ set speed (speed * 1.05) ] ]
          if mouse-interaction = "slow down particles" [ set speed (speed / 1.05) ]
        ]
      ]
    ]
    ask particles with [any? walls-here] [ remove-from-walls ] ; deal with any walls drawn on top of particles
 ][
    set sensor-placed? false
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; particle speed and flash visualization procedures ;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to make-a-flash
  sprout-flashes 1 [
    set color [150 150 150 255]
    set birthday ticks
  ]
end

to update-flash-visualization
  if (ticks - birthday > 0.4)  [ die ]
  set color lput (255 - (255 * (ticks - birthday ) / 0.4)) [150 150 150]
end

to update-particle-speed-visualization
  if visualize-particle-speed = "no" [ recolornone ]
  if visualize-particle-speed = "arrows" [ scale-arrowheads]
  if visualize-particle-speed = "different shades" [ recolorshade ]
end

to recolorshade
  let this-link my-out-links
  ask this-link [set hidden? true]
  ifelse speed < 27 [
    set color color-type - 3 + speed / 3
  ][
    set color color-type + 4.999
  ]
end

to recolornone
  let this-link my-out-links
  ask this-link [ set hidden? true ]
  set color color-type
end

to color-particle-and-link
  let this-link my-out-links
  let this-color-type color-type
  set color this-color-type
  ask this-link [set color this-color-type]
end

to scale-arrowheads
  let this-xcor xcor
  let this-ycor ycor
  let this-speed speed
  let this-heading heading
  let this-arrowhead out-link-neighbors
  let this-link my-out-links
  ask this-link [ set hidden? false ]
  ask this-arrowhead [
    set xcor this-xcor
    set ycor this-ycor
    set heading this-heading
    fd .5 + this-speed / 3
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;; initialization procedures ;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to make-box
  ask patches with [(pycor = min-pycor or pycor = max-pycor or pxcor = min-pxcor or pxcor = max-pxcor) ] [
    sprout-walls 1 [set color yellow initialize-this-wall set pressure? true]
  ]
end


to initialize-this-wall
  set valve-1? false
  set valve-2? false
  set pressure? false
end


to make-particles
  create-particles initial-#-particles [
    setup-particles
    random-position
  ]
end


to setup-particles  ; particles procedure
  set breed particles
  set shape "circle"
  set size particle-size
  set energy initial-gas-temperature
  set color-type green
  set color color-type
  set mass 10
  hatch-arrowheads 1 [ set hidden? true create-link-from myself [ tie ] ]
  set speed speed-from-energy
  set last-collision nobody
end


; Place particles at random, but they must not be placed on top of wall atoms..
to random-position
  let open-patches nobody
  let open-patch nobody
  set open-patches patches with [not any? turtles-here and pxcor != max-pxcor and pxcor != min-pxcor and pycor != min-pycor and pycor != max-pycor]
  set open-patch one-of open-patches
  if open-patch = nobody [
    user-message "No open patches found.  Exiting."
    stop
  ]
  setxy ([pxcor] of open-patch) ([pycor] of open-patch)
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; wall penetration error handling procedure ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; if particles actually end up within the wall
to remove-from-walls
  let this-wall walls-here with [not hidden?]
  if count this-wall != 0 [
    let available-patches patches with [not any? walls-here]
    let closest-patch nobody
    if (any? available-patches) [
      set closest-patch min-one-of available-patches [distance myself]
      set heading towards closest-patch
      setxy ([pxcor] of closest-patch)  ([pycor] of closest-patch)
    ]
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;REPORTERS;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report speed-from-energy
   report sqrt (2 * energy / mass)
end

to-report energy-from-speed
   report (mass * speed * speed / 2)
end

to-report limited-particle-energy
  let limited-energy energy
  if limited-energy > max-particle-energy [ set limited-energy max-particle-energy ]
  if limited-energy < min-particle-energy [ set limited-energy min-particle-energy ]
  report limited-energy
end


; Copyright 2010 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <widgets>
    <view x="234" maxPycor="25" updateMode="1" wrappingAllowedX="false" y="10" frameRate="30.0" minPycor="-25" height="519" showTickCounter="true" patchSize="10.0" fontSize="11" wrappingAllowedY="false" width="698" tickCounterLabel="ticks" maxPxcor="34" minPxcor="-34"></view>
    <button x="5" y="200" height="60" disableUntilTicks="false" forever="true" kind="Observer" width="215" display="go/stop/add elements">go</button>
    <button x="5" y="110" height="55" disableUntilTicks="false" forever="false" kind="Observer" width="215">setup</button>
    <slider x="5" step="1" y="10" height="33" min="0" direction="Horizontal" max="300" default="200.0" variable="initial-#-particles" width="215" display="initial-#-particles"></slider>
    <slider x="5" step="1" y="60" height="33" min="1" direction="Horizontal" max="500" default="375.0" variable="initial-gas-temperature" width="215" display="initial-gas-temperature"></slider>
    <chooser x="5" y="270" height="45" variable="mouse-interaction" current="0" width="215" display="mouse-interaction">
      <choice type="string" value="none - let particles move"></choice>
      <choice type="string" value="draw basic wall"></choice>
      <choice type="string" value="draw red removable wall"></choice>
      <choice type="string" value="draw blue removable wall"></choice>
      <choice type="string" value="big eraser"></choice>
      <choice type="string" value="slow down particles"></choice>
      <choice type="string" value="speed up particles"></choice>
      <choice type="string" value="paint particles purple"></choice>
      <choice type="string" value="paint particles green"></choice>
      <choice type="string" value="paint particles orange"></choice>
      <choice type="string" value="add green particles"></choice>
      <choice type="string" value="add purple particles"></choice>
      <choice type="string" value="add orange particles"></choice>
      <choice type="string" value="add/move sensor 1"></choice>
      <choice type="string" value="add/move sensor 2"></choice>
      <choice type="string" value="add/move sensor 3"></choice>
      <choice type="string" value="add/move sensor 4"></choice>
    </chooser>
    <button x="5" y="380" height="40" disableUntilTicks="false" forever="false" kind="Observer" width="215" display="remove/replace blue wall">toggle-blue-wall</button>
    <button x="5" y="335" height="40" disableUntilTicks="false" forever="false" kind="Observer" width="215" display="remove/replace red wall">toggle-red-wall</button>
    <chooser x="5" y="450" height="45" variable="visualize-particle-speed" current="0" width="215" display="visualize-particle-speed">
      <choice type="string" value="no"></choice>
      <choice type="string" value="different shades"></choice>
      <choice type="string" value="arrows"></choice>
    </chooser>
    <switch x="5" y="505" height="33" on="true" variable="show-wall-hits?" width="215" display="show-wall-hits?"></switch>
    <input x="1300" multiline="true" y="10" height="160" variable="code1" type="command" width="505"><![CDATA[;average (mean) number of violet particles nearby, over whole history.
record (count particles in-radius 3 with [color-type = violet] )
set reading mean my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <input x="1300" multiline="true" y="175" height="155" variable="code2" type="command" width="505"><![CDATA[;cumulative count (sum) of violet particles that touch the sensor
record (count particles-here with [color-type = violet])
set reading sum my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 50.
set light-up-threshold 50]]></input>
    <input x="1300" multiline="true" y="335" height="165" variable="code3" type="command" width="505"><![CDATA[;instantaneous count of violet particles that are nearby NOW (last measure)
record (count particles-here with [color-type = violet])
set reading last my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <input x="1300" multiline="true" y="505" height="165" variable="code4" type="command" width="505"><![CDATA[;running average number of violet particles nearby, over last 20 ticks.
record (count particles in-radius 3 with [color-type = violet] )
if (length my-history > 20) [
  let recent-data (sublist my-history ((length my-history) - 20) (length my-history))
  set reading mean recent-data
  set reading precision reading 1
]
;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <plot x="950" yMax="10.0" yAxis="reading" y="10" xMin="0.0" height="160" legend="true" xMax="10.0" autoplot="false" yMin="0.0" width="340" xAxis="time" display="Type 1 Sensors">
      <setup></setup>
      <update>ifelse (uniform-y-scales? = true)
[ if any? sensors  [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors ]  ]
[ if any? sensors with [number = 1] [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors with [ number = 1 ]   ]]
set-plot-x-range ( round max (list 0 (ticks - window-width) )) round ( ticks + 5)</update>
      <pen color="-612749" legend="true" interval="1.0" mode="0" display="index1">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 1 and index = 1] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-2674135" legend="true" interval="1.0" mode="0" display="index2">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 1 and index = 2] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-6995700" legend="true" interval="1.0" mode="0" display="index3">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 1 and index = 3] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-16449023" legend="true" interval="1.0" mode="0" display="index4">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 1 and index = 4] ]
[ plotxy ticks 0 ]</update>
      </pen>
    </plot>
    <plot x="950" yMax="10.0" yAxis="reading" y="175" xMin="0.0" height="155" legend="true" xMax="10.0" autoplot="false" yMin="0.0" width="340" xAxis="time" display="Type 2 Sensors">
      <setup></setup>
      <update>ifelse (uniform-y-scales? = true)
[ if any? sensors  [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors ]  ]
[ if any? sensors with [number = 2] [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors with [ number = 2 ]   ]]
set-plot-x-range (round max (list 0 (ticks - window-width) )) round ( ticks + 5)</update>
      <pen color="-2064490" legend="true" interval="1.0" mode="0" display="index1">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 2 and index = 1] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-5825686" legend="true" interval="1.0" mode="0" display="index2">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 2 and index = 2] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-8630108" legend="true" interval="1.0" mode="0" display="index3">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 2 and index = 3] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-16448764" legend="true" interval="1.0" mode="0" display="index4">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 2 and index = 4] ]
[ plotxy ticks 0 ]</update>
      </pen>
    </plot>
    <plot x="950" yMax="10.0" yAxis="reading" y="335" xMin="0.0" height="165" legend="true" xMax="10.0" autoplot="false" yMin="0.0" width="340" xAxis="time" display="Type 3 Sensors">
      <setup></setup>
      <update>ifelse (uniform-y-scales? = true)
[ if any? sensors  [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors ]  ]
[ if any? sensors with [number = 3] [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors with [ number = 3 ]   ]]
set-plot-x-range (round max (list 0 (ticks - window-width) )) round ( ticks + 5)</update>
      <pen color="-8990512" legend="true" interval="1.0" mode="0" display="index1">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 3 and index = 1] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-10649926" legend="true" interval="1.0" mode="0" display="index2">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 3 and index = 2 ] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-14985354" legend="true" interval="1.0" mode="0" display="index3">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 3 and index = 3] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-16113878" legend="true" interval="1.0" mode="0" display="index4">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 3 and index = 4] ]
[ plotxy ticks 0 ]</update>
      </pen>
    </plot>
    <plot x="950" yMax="10.0" y="505" xMin="0.0" height="165" legend="true" xMax="10.0" autoplot="false" yMin="0.0" width="340" display="Type 4 Sensors">
      <setup></setup>
      <update>ifelse (uniform-y-scales? = true)
[ if any? sensors  [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors ]  ]
[ if any? sensors with [number = 4] [ set-plot-y-range 0 max [ round (reading * 1.1) + .1 ] of sensors with [ number = 4 ]   ]]
set-plot-x-range (round max (list 0 (ticks - window-width) )) round ( ticks + 5)</update>
      <pen color="-4079321" legend="true" interval="1.0" mode="0" display="index1">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 4  and index = 1] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-10263788" legend="true" interval="1.0" mode="0" display="index2">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 4  and index = 2] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-6459832" legend="true" interval="1.0" mode="0" display="index3">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 4  and index = 3] ]
[ plotxy ticks 0 ]</update>
      </pen>
      <pen color="-14477296" legend="true" interval="1.0" mode="0" display="index4">
        <setup></setup>
        <update>let r 0
carefully
[ plotxy ticks [reading] of one-of sensors with [ number = 4  and index = 4] ]
[ plotxy ticks 0 ]</update>
      </pen>
    </plot>
    <monitor x="180" precision="17" y="555" height="53" fontSize="13" width="135" display="# Type 1 Sensors">count sensors with [ number = 1 ]</monitor>
    <monitor x="315" precision="17" y="555" height="53" fontSize="13" width="135" display="# Type 2 Sensors">count sensors with [ number = 2 ]</monitor>
    <monitor x="450" precision="17" y="555" height="53" fontSize="13" width="135" display="# Type 3 Sensors">count sensors with [ number = 3 ]</monitor>
    <monitor x="585" precision="17" y="555" height="53" fontSize="13" width="135" display="# Type 4 Sensors">count sensors with [ number = 4 ]</monitor>
    <note x="1925" y="20" height="26" backgroundDark="0" textColorLight="-16777216" backgroundLight="0" fontSize="11" width="210"></note>
    <input x="1810" multiline="true" y="10" height="160" variable="example1" type="command" width="465"><![CDATA[;average number of violet particles nearby, over whole history.
record (count particles in-radius 3 with [color-type = violet] )
set reading mean my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <input x="1810" multiline="true" y="175" height="155" variable="example2" type="command" width="465"><![CDATA[;cumulative count of violet particles that touch the sensor
record (count particles-here with [color-type = violet])
set reading sum my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 50.
set light-up-threshold 50]]></input>
    <input x="1810" multiline="true" y="335" height="165" variable="example3" type="command" width="465"><![CDATA[;instantaneous count of violet particles that are nearby NOW
record (count particles-here with [color-type = violet])
set reading last my-history
set reading precision reading 1

;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <input x="1810" multiline="true" y="505" height="165" variable="example4" type="command" width="460"><![CDATA[;running average number of violet particles nearby, over last 20 ticks.
record (count particles in-radius 3 with [color-type = violet] )
if (length my-history > 20) [
  let recent-data (sublist my-history ((length my-history) - 20) (length my-history))
  set reading mean recent-data
  set reading precision reading 1
]
;turn the sensor "on" (white) if the reading is > 1.
set light-up-threshold 1]]></input>
    <monitor x="585" precision="17" y="610" height="53" fontSize="13" width="135" display="Avg Sensor 4 value">precision (mean [reading] of sensors with [ number = 4 ]) 3</monitor>
    <monitor x="450" precision="17" y="610" height="53" fontSize="13" width="135" display="Avg Sensor 3 value">precision (mean [reading] of sensors with [ number = 3 ]) 3</monitor>
    <monitor x="180" precision="17" y="610" height="53" fontSize="13" width="135" display="Avg Sensor 1 value">precision ( mean [reading] of sensors with [ number = 1 ])  3</monitor>
    <monitor x="315" precision="17" y="610" height="53" fontSize="13" width="135" display="Avg Sensor 2 value">precision (mean [reading] of sensors with [ number = 2 ]) 3</monitor>
    <switch x="740" y="590" height="33" on="true" variable="uniform-y-scales?" width="200" display="uniform-y-scales?"></switch>
    <slider x="740" step="10" y="628" height="33" min="50" direction="Horizontal" max="1000" default="360.0" variable="window-width" units="ticks" width="200" display="window-width"></slider>
    <button x="5" y="555" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="170" display="Reset Tick Counter">init-time</button>
    <note x="740" y="560" height="18" backgroundDark="0" textColorLight="-8053223" backgroundLight="0" fontSize="14" width="150">PLOT SETTINGS</note>
    <button x="5" y="595" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="170" display="load">let file user-file
if file != "" [ import-world file ]</button>
    <button x="5" y="630" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="170" display="save">export-world user-input "Save as:"</button>
  </widgets>
  <info><![CDATA[## WHAT IS IT?

This model enables students to draw a model to "sketch" representations of new systems to explore concepts related to gas behavior and gas particles. In addition, it enables students to create sensors by writing simple NetLogo code and use these sensors to collect data from their models. A wide range of real world systems can be modeled with this simple interface (e.g. diffusion of perfume from an uncapped container, hot gas mixed with a cold gas, mixtures of gases).

This model is part of the Particulate Nature of Matter (PNoM) Curricular Unit. Most of the models in PNoM use the same basic rules for simulating the behavior of gases. Each model highlights different features of how gas behavior is related to gas particle behavior and adds new features to the model.

In all of the models, gas particles are assumed to move and to collide, both with each other and with objects such as walls.

In this model, particles can be added, color coded, and sped up or slowed down, by drawing with the mouse cursor in the WORLD & VIEW and selecting the appropriate MOUSE-INTERACTION. Also, additional types of removable and replaceable walls can be added to the WORLD.

## HOW IT WORKS

The particles are modeled as hard balls with no internal energy except that which is due to their motion. Collisions between particles are elastic. The total kinetic energy of the two particles after the encounter is equal to their total kinetic energy before the encounter. When a particle hits the wall, it bounces off the wall and neither gains energy from nor loses energy to the wall.

The exact way two particles collide is as follows:
1. A particle moves in a straight line without changing its speed, unless it collides with another particle or bounces off the wall.
2. Two particles "collide" if they find themselves on the same patch. In this model, two turtles are aimed so that they will collide at the origin.
3. An angle of collision for the particles is chosen, as if they were two solid balls that hit, and this angle describes the direction of the line connecting their centers.
4. The particles exchange momentum and energy only along this line, conforming to the conservation of momentum and energy for elastic collisions.
5. Each particle is assigned its new speed, heading and energy.

## HOW TO USE IT

### Buttons
SETUP - sets up the initial conditions set on the sliders.
GO/STOP/ADD ELEMENTS - runs and stops the model. This button must be pressed in order to interact with the model.
REMOVE/REPLACE RED WALL - Toggles the red walls on and off.
REMOVE/REPLACE BLUE WALL - Toggles the blue walls on and off.
RESET TICK COUNTER - Resets the tick counter to zero.
SAVE - Saves the current state of the world to a file the user specifies.
LOAD - Loads a previously saved world from a file the user specifies.

### Sliders
INITIAL-#-PARTICLES - sets the number of gas particles in the box when the simulation starts.
INITIAL-GAS-TEMPERATURE -  sets the initial temperature of the gas.
WINDOW-WIDTH - sets the width of the plots in terms of ticks (x-axis).


### Switches
SHOW-WALL-HITS? - turn visualization off when particles hits the walls (as flashes) on or off.
UNIFORM-Y-SCALES? - make all four plots have the same scale maximum Y coordinate value and scale accordingly.

### Choosers
VISUALIZE-PARTICLE-SPEED? allows you to visualize particle speeds.  For example, selecting "arrows", creates a representation of each particle velocity using a scalar arrow.  Selecting "shades" creates representation of each particle speed using a brighter (faster) or darker (slower) shade of the particle's color.

MOUSE-INTERACTION  sets the type interaction the user can do with the mouse in the WORLD & VIEW.

  Possible settings include:
"draw basic wall" - adds a gray wall under the mouse cursor.
"draw red removable wall" - adds a red wall under the mouse cursor which can be alternatively removed and replaced using the REMOVE/REPLACE RED WALL.
"draw green removable wall" - adds a green wall under the mouse cursor which can be alternatively removed and replaced using the REMOVE/REPLACE GREEN WALL.
"big eraser" - erases all objects (except the yellow box boundary walls) under the mouse cursor.
"slow down particles" - increase the current speed of the particles by 10%.
"speed up particles" - reduces the current speed of the particles by 10%.
"paint particles green" - recolors the particles under the mouse cursor green (other settings include orange and purple).
"add green particles" - adds a couple of new particles under the mouse cursor (other settings include orange and purple).

WATCH-AND-TRACE-A-PARTICLE - highlights a particle and puts its pendown.
RIDE-A-PARTICLE - attaches the viewpoint of the observer to a particle.
RESET-PERSPECTIVE used for re-centering the WORLD & VIEW after riding or watching a particle.

### Code Inputs
CODE 1 - the code that corresponds to the algorithm of "sensor 1".
EXAMPLE 1 - an example code for the "sensor 1". In case you would like to start over, you can copy this code to CODE 1 input box.

CODE 2 - the code that corresponds to the algorithm of "sensor 2".
EXAMPLE 2 - an example code for the "sensor 2". In case you would like to start over, you can copy this code to CODE 2 input box.

CODE 3 - the code that corresponds to the algorithm of "sensor 3".
EXAMPLE 3 - an example code for the "sensor 3". In case you would like to start over, you can copy this code to CODE 3 input box.

CODE 4 - the code that corresponds to the algorithm of "sensor 4".
EXAMPLE 4 - an example code for the "sensor 4". In case you would like to start over, you can copy this code to CODE 4 input box.

## THINGS TO NOTICE

The mouse interaction can be used while the model is running as well as when it is stopped.

## THINGS TO TRY

Create a model of how odors move throughout a room.  Why do some people smell the odor before others? Does the layout of furniture, large objects, and walls in the room effect the movement of the odor?  How about the temperature of the air in the room?

Create a model of diffusion of a perfume from a closed container.  How would you represent the different gases (the perfume and the surrounding air)?  What shape will the container be?  How will you model a removable cap or lid?

Create a model of room filled with cold air and a different room filled with warm air.  How will represent these different rooms of air?  What could you add to show what happens when they mix?

Create a model of heat transfer that shows what happens to the energy of one very fast moving gas particle when it hits a bunch of very slow moving gas particles.  What does this show happening to the energy of the initial gas particles?

## RELATED MODELS

* GasLab models
* Connected Chemistry models

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Novak, M., Brady, C., Holbert, N., Soylu, F. and Wilensky, U. (2010).  NetLogo PNoM 2 Diffusion Sensor Sandbox model.  http://ccl.northwestern.edu/netlogo/models/PNoM2DiffusionSensorSandbox.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

To cite the Particulate Nature of Matter curriculum as a whole, please use:

* Novak, M., Brady, C., Holbert, N., Soylu, F. and Wilensky, U. (2010). Particulate Nature of Matter curriculum.  http://ccl.northwestern.edu/curriculum/pnom/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.
Thanks to Umit Aslan and Mitchell Estberg for updating these models for inclusion the in Models Library.

## COPYRIGHT AND LICENSE

Copyright 2010 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact netlogo-commercial-admin@ccl.northwestern.edu.

<!-- 2010 PNoM Cite: Novak, M., Brady, C., Holbert, N., Soylu, F. -->]]></info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="add particles" rotatable="false" editableColorIndex="1">
      <circle x="60" y="60" marked="true" color="-684578305" diameter="180" filled="false"></circle>
      <circle x="36" y="36" marked="true" color="-684578305" diameter="228" filled="false"></circle>
    </shape>
    <shape name="add wall" rotatable="false" editableColorIndex="0">
      <rectangle endX="210" startY="90" marked="true" color="-1920102913" endY="210" startX="90" filled="false"></rectangle>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="0" y="150"></point>
        <point x="105" y="150"></point>
        <point x="105" y="293"></point>
        <point x="195" y="293"></point>
        <point x="195" y="150"></point>
        <point x="300" y="150"></point>
      </polygon>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="carbon" rotatable="true" editableColorIndex="0">
      <circle x="68" y="83" marked="false" color="-303222273" diameter="134" filled="true"></circle>
    </shape>
    <shape name="carbon-activated" rotatable="true" editableColorIndex="0">
      <circle x="68" y="83" marked="false" color="-303222273" diameter="134" filled="true"></circle>
      <line endX="135" startY="90" marked="false" color="-684578305" endY="210" startX="135"></line>
    </shape>
    <shape name="carbon2" rotatable="true" editableColorIndex="0">
      <circle x="30" y="45" marked="false" color="-244705793" diameter="210" filled="true"></circle>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="1">
      <circle x="30" y="30" marked="true" color="-684578305" diameter="240" filled="true"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="0">
      <circle x="16" y="16" marked="true" color="-1920102913" diameter="270" filled="true"></circle>
      <circle x="46" y="46" marked="false" color="255" diameter="210" filled="true"></circle>
    </shape>
    <shape name="clock" rotatable="true" editableColorIndex="0">
      <circle x="30" y="30" marked="true" color="-1920102913" diameter="240" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="31"></point>
        <point x="128" y="75"></point>
        <point x="143" y="75"></point>
        <point x="143" y="150"></point>
        <point x="158" y="150"></point>
        <point x="158" y="75"></point>
        <point x="173" y="75"></point>
      </polygon>
      <circle x="135" y="135" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="co2" rotatable="true" editableColorIndex="0">
      <circle x="83" y="165" marked="false" color="764264191" diameter="134" filled="true"></circle>
      <circle x="83" y="0" marked="false" color="764264191" diameter="134" filled="true"></circle>
      <circle x="83" y="83" marked="false" color="-303222273" diameter="134" filled="true"></circle>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="eraser" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="false" color="-1" endY="300" startX="0" filled="false"></rectangle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="heater-a" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="210" startY="90" marked="false" color="255" endY="210" startX="90" filled="true"></rectangle>
    </shape>
    <shape name="heater-b" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="135" startY="30" marked="false" color="255" endY="135" startX="30" filled="true"></rectangle>
      <rectangle endX="270" startY="165" marked="false" color="255" endY="270" startX="165" filled="true"></rectangle>
    </shape>
    <shape name="hex" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="0" y="150"></point>
        <point x="75" y="30"></point>
        <point x="225" y="30"></point>
        <point x="300" y="150"></point>
        <point x="225" y="270"></point>
        <point x="75" y="270"></point>
      </polygon>
    </shape>
    <shape name="hex-valve" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="false"></rectangle>
      <polygon color="-1920102913" filled="false" marked="true">
        <point x="105" y="60"></point>
        <point x="45" y="150"></point>
        <point x="105" y="240"></point>
        <point x="195" y="240"></point>
        <point x="255" y="150"></point>
        <point x="195" y="60"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="nitrogen" rotatable="true" editableColorIndex="0">
      <circle x="83" y="135" marked="false" color="1504722175" diameter="134" filled="true"></circle>
      <circle x="83" y="45" marked="false" color="1504722175" diameter="134" filled="true"></circle>
    </shape>
    <shape name="none" rotatable="true" editableColorIndex="0"></shape>
    <shape name="oxygen" rotatable="true" editableColorIndex="0">
      <circle x="83" y="135" marked="false" color="764264191" diameter="134" filled="true"></circle>
      <circle x="83" y="45" marked="false" color="764264191" diameter="134" filled="true"></circle>
    </shape>
    <shape name="pentagon" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="sensor" rotatable="false" editableColorIndex="0">
      <circle x="16" y="16" marked="true" color="-1920102913" diameter="270" filled="true"></circle>
      <circle x="46" y="46" marked="false" color="255" diameter="210" filled="true"></circle>
      <rectangle endX="60" startY="15" marked="true" color="-1920102913" endY="60" startX="15" filled="true"></rectangle>
      <rectangle endX="285" startY="15" marked="true" color="-1920102913" endY="60" startX="240" filled="true"></rectangle>
      <rectangle endX="60" startY="240" marked="true" color="-1920102913" endY="285" startX="15" filled="true"></rectangle>
      <rectangle endX="285" startY="240" marked="true" color="-1920102913" endY="285" startX="240" filled="true"></rectangle>
    </shape>
    <shape name="spray paint" rotatable="false" editableColorIndex="0">
      <circle x="164" y="67" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="82" y="37" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="127" y="37" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="96" y="59" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="52" y="82" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="22" y="112" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="52" y="142" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="29" y="204" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="127" y="112" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="112" y="142" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="81" y="204" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="149" y="168" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="200" y="40" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="257" y="91" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="207" y="93" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="190" y="132" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="233" y="161" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="247" y="189" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="135" y="193" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="187" y="219" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="234" y="232" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="176" y="261" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="144" y="249" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="146" y="279" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
      <circle x="87" y="249" marked="true" color="-1920102913" diameter="16" filled="true"></circle>
    </shape>
    <shape name="spray particles" rotatable="true" editableColorIndex="0">
      <circle x="54" y="84" marked="true" color="-1920102913" diameter="42" filled="true"></circle>
      <circle x="189" y="114" marked="true" color="-1920102913" diameter="42" filled="true"></circle>
      <circle x="99" y="174" marked="true" color="-1920102913" diameter="42" filled="true"></circle>
      <circle x="189" y="234" marked="true" color="-1920102913" diameter="42" filled="true"></circle>
      <circle x="159" y="9" marked="true" color="-1920102913" diameter="42" filled="true"></circle>
    </shape>
    <shape name="square" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="valve-1" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="false"></rectangle>
      <rectangle endX="180" startY="120" marked="true" color="-1920102913" endY="180" startX="120" filled="false"></rectangle>
    </shape>
    <shape name="valve-2" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="false"></rectangle>
      <rectangle endX="120" startY="120" marked="true" color="-1920102913" endY="180" startX="60" filled="false"></rectangle>
      <rectangle endX="225" startY="120" marked="true" color="-1920102913" endY="180" startX="165" filled="false"></rectangle>
    </shape>
    <shape name="valve-hex" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="false"></rectangle>
      <polygon color="-1920102913" filled="false" marked="true">
        <point x="105" y="60"></point>
        <point x="45" y="150"></point>
        <point x="105" y="240"></point>
        <point x="195" y="240"></point>
        <point x="255" y="150"></point>
        <point x="195" y="60"></point>
      </polygon>
    </shape>
    <shape name="valve-triangle" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="45"></point>
        <point x="30" y="240"></point>
        <point x="270" y="240"></point>
      </polygon>
    </shape>
    <shape name="valves" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="false"></rectangle>
    </shape>
    <shape name="wall" rotatable="false" editableColorIndex="0">
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <previewCommands>setup repeat 75 [ go ]</previewCommands>
</model>
