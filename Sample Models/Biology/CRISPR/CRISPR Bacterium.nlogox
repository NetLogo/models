<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0" snapToGrid="true">
  <code><![CDATA[globals [
  ; Housekeeping variables
  cell-wall  ; Patch-set containing cell wall patches for boundary checking
  CRISPR     ; Patch-set containing CRISPR DNA patches for boundary checking
  virus-event

  ; Bacterial attributes
  array      ; List of viral spacers currently stored in the array
]

breed [ RNAPs RNAP ]            ; Brown
breed [ cas9s cas9 ]            ; Green
breed [ guide-RNAs guide-RNA ]  ; Lime
breed [ cas-dimers cas-dimer ]  ; Orange
breed [ viruses virus ]         ; Red

guide-RNAs-own [ sequence bound? ]
viruses-own [ sequence bound? ]
RNAPs-own [ on-dna? ]
cas9s-own [ bound? ]
cas-dimers-own [ bound? ]

to setup
  clear-all
  ; Build cell wall
  ask patches with [ abs pxcor = max-pxcor ] [ set pcolor gray ]
  ask patches with [ abs pycor = max-pycor ] [ set pcolor gray ]
  set cell-wall patches with [ pcolor = gray ]

  ; Build DNA and CRISPR array
  ask patches with [ (abs pycor = 2) and (abs pxcor <= 10) ] [ set pcolor blue ]
  ask patches with [ (abs pxcor = 10) and (abs pycor <= 2) ] [ set pcolor blue ]
  ; Build CRISPR array (on a plasmid)
  ask patches with [ (pycor = 0) and (abs pxcor <= 2) ] [ set pcolor sky + 1 ]
  set CRISPR patches with [ pcolor = sky + 1 ]
  ask min-one-of CRISPR [ pxcor ] [ set pcolor cyan ]

  set virus-event ""
  set array n-values initial-array-size [ random max-virus-types ]

  set-default-shape guide-RNAs "stripe"
  set-default-shape viruses "stripe"

  ; Build polymerases
  create-RNAPs 25 [
    set shape "rnap"
    set color brown
    set on-dna? false
  ]

  ; Initialize the other agent types at steady state.
  ; Instead of needing to run the model for 1000+ ticks, we can use a shortcut:
  ; Produce tons of agents through the normal transcription process
  ; and then degrade the appropriate amount.
  ; Production and degradation of normal cell components only depend on time,
  ; not interactions between agents, so this saves us the time that would be
  ; spent processing particle motion, interactions, and visualization.
  let ticks-per-transcription crispr-function / 8  ; Approximate, found by trial and error.
  let transcripts-per-RNAP 5
  let transcriptions transcripts-per-RNAP * count RNAPs
  ask RNAPs [
    repeat transcripts-per-RNAP [
      if random-float 100 < crispr-function [ transcribe ]
    ]
  ]
  repeat transcriptions * ticks-per-transcription [ degrade ]

  ask turtles [
    ; Loop-stop construct here imitates a do-while loop.
    loop [
      setxy random-xcor random-ycor
      if not member? patch-here cell-wall [ stop ]
    ]
  ]

  update-labels
  reset-ticks
end

to go
  update-labels
  if infected? [ stop ]
  ask RNAPs [ go-RNAPs ]
  ask cas9s [ go-cas9s ]
  ask guide-RNAs [ go-guide-RNAs ]
  ask cas-dimers [ go-cas-dimers ]
  ask viruses [ go-viruses ]
  degrade
  tick
end

; Simulates a virus entering the cell through the cell membrane.
to infect [ seq ] ; Observer procedure
  ask one-of cell-wall [
    sprout-viruses 1 [
      set sequence seq
      set color red
      set bound? false
      set virus-event (word "Virus " sequence " invaded the cell.")
    ]
  ]
end

to common-infection
  let guides remove-duplicates map [ i ->
    list (item i array) (count guide-RNAs with [sequence = (item i array)])
  ] n-values length array [ i -> i ]
  set guides sort-by [ [list1 list2] -> item 1 list1 > item 1 list2 ] guides
  let front-range ceiling (processivity / 200 * length array)
  infect item 0 one-of sublist guides 0 front-range
end

; RNAPs move randomly when not on DNA. Under certain circumstances, they
; transcribe the CRISPR array to produce new cas9 proteins, cas1-cas2 dimers,
; and one guide RNA for each spacer in the CRISPR array.
to go-RNAPs ; RNAP procedure
  ifelse on-dna? [
    ; If we are currently transcribing the CRISPR array, keep doing that.
    fd 1
    ; Once we finish, change back to normal movement and produce CRISPR elements.
    if not member? patch-here CRISPR [
      set on-dna? false
      transcribe
    ]
  ] [
    ; If we are not transcribing, move around randomly.
    move 1
    ; If we end up on the CRISPR promoter, start transcribing.
    if pcolor = cyan and random-float 100 < crispr-function [
      set on-dna? true
      move-to patch-here
      set heading 90
    ]
  ]
end

; Cas9 proteins randomly wander through the cell. If they find a guide RNA,
; they can bind to it. If they are already bound to a guide RNA, there is a
; small chance they will unbind it. If they have a guide and find a virus
; with a matching sequence, they cleave the virus.
to go-cas9s
  ; If bound to a guide RNA, several things could happen.
  if bound? [
    ; If there is a virus here, check if it matches the bound guide RNA.
    if any? viruses-here with [ not bound? ] [
      let virus-partner one-of viruses-here
      let partner-sequence [ sequence ] of one-of link-neighbors
      let virus-sequence [ sequence ] of virus-partner
      ; If it matches, destroy the virus.
      if partner-sequence = virus-sequence [
        ask virus-partner [
          set virus-event (word "Virus " sequence " was cleaved by cas9.")
          die
        ]
      ]
    ]
    ; Randomly unbind current guide at a low rate.
    if random-float 100 < guide-unbind-chance [
      ; There should only ever be one guide RNA linked to a cas9 at a time.
      let partner one-of link-neighbors
      ask my-links [ die ]
      ; Update bound? status and appearance for the cas9 and guide RNA.
      set bound? false
      set shape "cas9"
      ask partner [
        set bound? false
        move 1
      ]
    ]
  ]
  ; Random walk through the cell.
  move 1
  ; If the cas9 is unbound and near an unbound guide RNA, bind it.
  if not bound? and any? guide-RNAs-here with [ not bound? ] [
    ; Grab an unbound guide RNA in the area and tie to it.
    let partner one-of guide-RNAs-here with [ not bound? ]
    move-to partner
    create-link-with partner [ hide-link tie ]
    ; Update bound? status and appearance for the cas9 and guide RNA.
    set bound? true
    ask partner [ set bound? true ]
  ]
end

; Guide RNAs drift randomly through the cell. For more information, see go-cas9s.
to go-guide-RNAs ; Guide-RNA procedure
  if not bound? [ move 1 ]
end

; Cas1-Cas2 dimers drift randomly through the cell most of the time. When they
; encounter viral genetic material, they carry it to the CRISPR array and
; incorporate a new spacer into the array to match it.
to go-cas-dimers ; Cas-dimer procedure
  ifelse bound? [
    ; If the dimer is carrying viral material, head towards the CRISPR locus.
    set heading towards one-of CRISPR
    fd 1
    ; Once the dimer gets to the locus, add an appropriate spacer and kill the virus.
    if member? patch-here CRISPR [
      let virus-partner one-of link-neighbors
      set array fput ([ sequence ] of virus-partner) array
      ask virus-partner [
        set virus-event (word "Virus " sequence " was added to the array.")
        die
      ]
      set bound? false
    ]
  ] [
    ; If the dimer isn't carrying viral material, wander randomly.
    move 1
    ; If the dimer finds a virus, bind to it.
    if any? viruses-here with [ not bound? ] [
      let virus-partner one-of viruses-here
      move-to virus-partner
      create-link-with virus-partner [ hide-link tie ]
      set bound? true
      ask virus-partner [
        set bound? true
        set virus-event (word "Virus " sequence " was bound by cas1/2.")
      ]
    ]
  ]
end

; If the virus isn't bound to anything (meaning it isn't caught by the cell yet),
; it wanders randomly until it finds the cell's DNA and inserts itself.
to go-viruses ; Virus procedure
  if not bound? [
    ; Move slowly because of its enormous size, but generally towards the DNA.
    set heading towards one-of dna-patches
    fd 0.05
    ; Incorporate into the genome.
    if pcolor = blue [
      move-to patch-here
      set shape "square"
      set bound? true
      set virus-event (word "Virus " sequence " infected the genome.")
      watch-me
    ]
  ]
end

; Controls the random movement of all turtles.
; If you're headed towards the cell wall, just turn until you're not.
to move [ speed ]  ; Turtle procedure
  rt random-float 360
  while [ wall-ahead? ] [ rt random-float 360 ]
  forward speed
end

; Implements the transcription / translation of the CRISPR array.
; The entire array is transcribed together.
to transcribe ; RNAP procedure
  ; The cas9 gene comes at the start of the CRISPR array.
  hatch-cas9s 1 [
    set color green
    set shape "cas9"
    set bound? false
    ; Distribute around the center of the cell
    setxy 0 0
    repeat 5 [ move 1 ]
  ]
  ; The array also includes genes for the Cas1-Cas2 complexes.
  ; Each complex needs 2 Cas2 proteins and 4 Cas1 proteins, so
  ; on average one complex will be produced every 4 transcriptions.
  if random-float 1 < 0.25 [
    hatch-cas-dimers 1 [
      set color orange
      set shape "cas dimer"
      set bound? false
      ; Distribute around the center of the cell
      setxy 0 0
      repeat 5 [ move 1 ]
    ]
  ]
  ; After the cas genes there are copies of each spacer all in a row,
  ; and we produce one guide RNA for each spacer in the array.
  foreach array [ spacer ->
    hatch-guide-RNAs 1 [
      set color turquoise
      set sequence spacer
      set bound? false
      ; Distribute around the center of the cell
      setxy 0 0
      repeat 5 [ move 1 ]
    ]
    ; High processivity should mean a smaller chance to stop early.
    ; This stop exits the foreach, but not the transcribe procedure.
    if random-float 100 > processivity [ stop ]
  ]
end

; Governs the degradation of proteins and genetic elements in the cell.
to degrade ; Observer procedure
  ; These ask blocks require all turtles in the set to have the variable bound?.

  ; Degrade Cas9 proteins and guide RNAs at a low rate.
  ask (turtle-set cas9s guide-RNAs) [
    if random-float 100 < 0.05 [
      if bound? [
        ask link-neighbors [ set bound? false ]
      ]
      die
    ]
  ]
  ; Viruses and Cas1-Cas2 complexes degrade at a higher rate than Cas9s and guides.
  ; For viruses, innate immune systems like restriction enzymes increase degradation.
  ask viruses [
    if random-float 100 < 0.5 [
      if bound? [
        ask link-neighbors [ set bound? false ]
      ]
      set virus-event (word "Virus " sequence " was degraded by innate resistance.")
      die
    ]
  ]
  ; For Cas1-Cas2 complexes, the whole thing stops working if any of the 6 components
  ; stop working. This is the simplest way to account for that without trying to
  ; model each component as a separate agent.
  ask cas-dimers [
    if random-float 100 < 0.2 [
      if bound? [
        ask link-neighbors [ set bound? false ]
      ]
      die
    ]
  ]

  ; Random low-level loss of spacers from the CRISPR array.
  if random-float 100 < 0.001 and not empty? array [
    set array remove-item (random length array) array
  ]
end

to update-labels
  ifelse labels? [
    ask (turtle-set guide-RNAs viruses) [ set label sequence ]
  ] [
    ask turtles [ set label "" ]
  ]
end

; Called in the 'Plot update commands' block of the histogram plots.
; Adjusts the x and y ranges of the histogram dynamically based on the input data.
to update-histogram-ranges [ input-list interval ]
  ; If the input list is empty, let the plot use its default ranges.
  ; Otherwise, adjust the plot axis ranges to fit the input data.
  if not empty? input-list [
    ; Adjust the x range to include the whole input data set.
    ; The x range expands with the data, but never contracts.
    let plot-upper-bound max list plot-x-max (interval + max input-list)
    let plot-lower-bound min list plot-x-min min input-list
    set-plot-x-range plot-lower-bound plot-upper-bound

    ; Adjust the y range based on the input data, avoiding constant shifts.
    ; Find the max bar height using the mode(s) of the input data.
    let list-modes-unique modes input-list
    let list-modes-enumerated filter [ i -> member? i list-modes-unique ] input-list
    let max-bar-height (length list-modes-enumerated) / (length list-modes-unique)
    ; The y range should be about 150% of the max bar height, within a tolerance.
    let grow-threshold ceiling (1.05 * max-bar-height)  ; Bar > 95% of the y max
    let shrink-threshold floor (2 * max-bar-height)     ; Bar < 50% of the y max
    if (plot-y-max <= grow-threshold) or (plot-y-max >= shrink-threshold) [
      set-plot-y-range 0 ceiling (1.5 * max-bar-height) ; Bar = 67% of the y max
    ]
  ]
end

;------------------------------------------------------------------------------;
; Useful reporters

to-report wall-ahead? ; Turtle procedure
  report (member? patch-ahead 1 cell-wall) or (member? patch-ahead 2 cell-wall)
end

to-report dna-patches
  report patches with [pcolor = blue]
end

to-report infected?
  report any? viruses with [shape = "square"]
end


; Copyright 2019 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <widgets>
    <view x="190" maxPycor="8" updateMode="1" wrappingAllowedX="false" y="20" frameRate="30.0" minPycor="-8" height="332" showTickCounter="true" patchSize="19.0" fontSize="10" wrappingAllowedY="false" width="635" tickCounterLabel="ticks" maxPxcor="16" minPxcor="-16"></view>
    <button x="20" y="20" height="40" disableUntilTicks="false" forever="false" kind="Observer" width="80">setup</button>
    <button x="110" y="20" height="40" disableUntilTicks="true" forever="true" kind="Observer" width="70">go</button>
    <monitor x="430" precision="17" y="505" height="45" fontSize="11" width="70" display="Viruses">count viruses</monitor>
    <monitor x="775" precision="17" y="505" height="45" fontSize="11" width="50" display="Length">length array</monitor>
    <plot x="190" yMax="10.0" y="355" xMin="0.0" height="140" legend="true" xMax="10.0" autoplot="true" yMin="0.0" width="310" display="CRISPR System Elements">
      <setup></setup>
      <update></update>
      <pen color="-10899396" legend="true" interval="1.0" mode="0" display="Guide RNAs">
        <setup></setup>
        <update>plot count guide-RNAs</update>
      </pen>
      <pen color="-14835848" legend="true" interval="1.0" mode="0" display="Total Cas9s">
        <setup></setup>
        <update>plot count cas9s</update>
      </pen>
      <pen color="-5825686" legend="true" interval="1.0" mode="0" display="Bound Cas9s">
        <setup></setup>
        <update>plot count cas9s with [ bound? ]</update>
      </pen>
      <pen color="-955883" legend="true" interval="1.0" mode="0" display="Cas1/2s">
        <setup></setup>
        <update>plot count cas-dimers</update>
      </pen>
    </plot>
    <plot x="520" yMax="10.0" y="355" xMin="0.0" height="140" legend="true" xMax="10.0" autoplot="true" yMin="0.0" width="305" display="Guide RNAs">
      <setup>set-plot-x-range 0 max-virus-types</setup>
      <update>update-histogram-ranges sentence ([sequence] of guide-rnas) (array) 1</update>
      <pen color="-16777216" legend="true" interval="1.0" mode="1" display="RNAs">
        <setup></setup>
        <update>histogram [sequence] of guide-RNAs</update>
      </pen>
      <pen color="-2674135" legend="true" interval="1.0" mode="1" display="Array">
        <setup></setup>
        <update>histogram array</update>
      </pen>
    </plot>
    <slider x="20" step="1" y="300" height="33" min="1" direction="Horizontal" max="30" default="15.0" variable="initial-array-size" width="160" display="initial-array-size"></slider>
    <slider x="20" step="1" y="345" height="33" min="1" direction="Horizontal" max="100" default="30.0" variable="max-virus-types" width="160" display="max-virus-types"></slider>
    <monitor x="520" precision="17" y="505" height="45" fontSize="11" width="245" display="Bacterial CRISPR Array">array</monitor>
    <monitor x="190" precision="17" y="505" height="45" fontSize="11" width="70" display="Guide RNAs">count guide-rnas</monitor>
    <monitor x="270" precision="17" y="505" height="45" fontSize="11" width="70" display="Cas9s">count cas9s</monitor>
    <monitor x="350" precision="17" y="505" height="45" fontSize="11" width="70" display="Cas1/2s">count cas-dimers</monitor>
    <slider x="20" step="1" y="435" height="33" min="0" direction="Horizontal" max="100" default="80.0" variable="processivity" units="%" width="160" display="processivity"></slider>
    <slider x="20" step="1" y="480" height="33" min="0" direction="Horizontal" max="100" default="20.0" variable="crispr-function" units="%" width="160" display="crispr-function"></slider>
    <button x="20" y="70" height="45" disableUntilTicks="true" forever="false" kind="Observer" width="160">common-infection</button>
    <button x="20" y="125" height="45" disableUntilTicks="true" forever="false" kind="Observer" width="160" display="random-infection">infect random max-virus-types</button>
    <monitor x="520" precision="17" y="560" height="45" fontSize="11" width="305" display="Viral sequences">sort [sequence] of viruses</monitor>
    <switch x="20" y="180" height="33" on="false" variable="labels?" width="160" display="labels?"></switch>
    <monitor x="190" precision="17" y="560" height="45" fontSize="11" width="310" display="Virus event monitor">virus-event</monitor>
    <slider x="20" step="1" y="390" height="33" min="0" direction="Horizontal" max="10" default="5.0" variable="guide-unbind-chance" units="%" width="160" display="guide-unbind-chance"></slider>
    <note x="20" y="220" height="86" color="0.0" transparent="true" fontSize="12" width="185">Even after a successful
infection, turn labels on
and off by toggling
the switch and
pressing go.</note>
    <note x="20" y="555" height="60" color="0.0" transparent="true" fontSize="12" width="170">The virus event monitor
shows what interactions
are taking place.</note>
  </widgets>
  <info><![CDATA[## WHAT IS IT?

This model illustrates the role that CRISPR plays in defending bacteria from infection by focusing on a single cell surrounded by an unseen environment. In natural environments bacteria are challenged with infectious viruses very often, so bacteria must have ways to defend themselves in order to survive.

There are many ways in which bacteria defend themselves from viruses. Bacterial defense systems can be broadly categorized as innate and adaptive.  Innate systems are generally exploit a feature common to many or all viruses, and do not change based on the bacterium's past. A common example of this would be restriction enzymes, which slice up nucleic acids containing certain base sequences, regardless of where the nucleic acid is from. This is also analogous to our human innate immune system, where white blood cells like macrophages and neutrophils attack foreign material using nonspecific methods like reactive chemicals.

Bacteria were recently found to also employ adaptive immunity in their constant struggle against viruses. This adaptive system is called CRISPR. With it, bacteria are able keep a heritable genetic record of past infection attempts, which makes them and their descendants much more effective at fending off future infections by the same or similar viruses. This is made possible through a system that specifically recognizes the DNA of past viruses using DNA samples called **spacers** stored in a **CRISPR array** and cleaves it using a targeted protein complex.

CRISPR is often very effective in protecting bacteria from infection. However, there are many components to the system that must work together to provide this protection. All of the components are coded for in a single locus, often found on a plasmid separated from the main genome. The structure of this locus is shown below:
![Diagram of a CRISPR locus showing Cas genes and the CRISPR array.](crispr-locus.png)
The whole locus is transcribed together, moving from left to right in this diagram. After transcription, the Cas genes are translated into various Cas proteins, and the spacers in the CRISPR array are processed into guide RNAs.

The spacers in the CRISPR array are short fragments of DNA from viruses that the bacterium or its ancestors encountered in the past. When they are processed into guide RNAs, they are critical for the function of one of the protein components, Cas9. Cas9 proteins bind to one of these guides and uses it to recognize when other DNA might come from the same virus as the original spacer in the array. If the guide and the foreign DNA sequences match, indicating it is probably also a virus, the Cas9 protein is able to cut the DNA and destroy it.

Other Cas proteins are important for maintaining the library of spacers in the CRISPR array. Four Cas1 monomers and two Cas2 monomers can form a protein complex which is capable of taking small sections of DNA from viruses and adding them to the CRISPR array as new spacers. When this happens, the new spacers are added at the 'front' of the array, just after the leader sequence (see the diagram above). This means that the array is roughly ordered so that the most recently encountered viruses are closer to the Cas genes in the locus and are transcribed first. Spacers can also be lost from the array. This tends to be more likely the closer the spacer is to the end of the array, meaning that older spacers tend to be lost first.

The CRISPR system as a whole only works when each of its components is functioning properly, and each component often only works when in conjunction with other components. This model is meant to help illustrate this complex interdependence.

## HOW IT WORKS

There are several types of dynamic agent in this model: RNA polymerases, viruses, guide RNAs, cas9 proteins, and cas1-cas2 complexes. There are also three types of static agent: the bacterial genome, the CRISPR locus, and the cell wall.

The static agents are created when the model is set up and then serve only as interaction points for the dynamic agents. The cell wall is the ring of gray around the outer edge of the cell, and simply contains the other agents. The genome is the ring of darker blue near the center of the cell, representing the circular genome typical of bacteria. The CRISPR locus is the small band of light blue at the center of the cell, with a slightly lighter promoter region at one end. This represents a plasmid, which is often where CRISPR loci are found. The role of the genome and CRISPR locus will be discussed below.

All of the dynamic agents move through the cell at a speed influenced by their relative size. Small molecules like guide RNAs can diffuse very quickly, moderately sized molecules like proteins diffuse slightly more slowly, and very large molecules like viral DNA move very slowly. Viruses diffuse in the general direction of the bacterial genome, while every other dynamic agent moves via a random walk constrained by the cell wall. All of the dynamic agents also have a small chance to degrade on each tick, which is influenced by a variety of factors.

When RNA polymerases encounter the promoter region of the CRISPR locus, there is a chance that they will transcribe the locus and produce the molecular components of the CRISPR system. They do not typically have perfect processivity, meaning that they may fall off of the DNA before transcribing the entire array. In this case, only the CRISPR components that come before the drop location in the locus will be produced.

During an infection, viruses enter the cell at the cell wall. If a virus reaches the genome, it is able to incorporate into the DNA. At this point the cell is considered lost to the infection.

Cas9 proteins move through the cell until they encounter a free guide RNA. If they are not bound to anything, the Cas9 will bind to the guide RNA and begin to carry it around as it continues to move. There is a small chance each tick for the Cas9 to dissociate from the guide. If the Cas9 encounters a virus while it also has a guide RNA, it tries to cut the virus. If the guide matches the virus, the virus will be destroyed, and otherwise the virus is unaffected.

Cas1-Cas2 complexes move through the cell until they encounter a virus. When this happens, they bind to the virus and cut out a sample of it. They then carry the sample to the CRISPR locus in the center of the cell and add a new spacer to the array that matches the invading virus.

## HOW TO USE IT

This model can be used to investigate the effects of different CRISPR expression strategies. These strategies can involve changes to the overall expression of the locus or changes to the persistent expression of spacers from less recent infection attempts.

This model can also examine how the efficiency of CRISPR is affected by the features of the environment or the invading virus. For example, it is easy to compare how effective CRISPR is at stopping very recently encountered viruses or viruses that are more rare. Similarly, it is possible to see how effective CRISPR becomes when there is an increase or decrease in viral diversity or a change to the array size.

### Buttons

#### `SETUP`
Initializes variables and creates the cell and the CRISPR system's components.

#### `GO`
Runs the model.

#### `RANDOM-INFECTION`
Infects the cell with a random virus.

#### `COMMON-INFECTION`
Infects the cell with a common or recently seen virus, as determined by the cell's CRISPR array.

### Sliders and Switches

#### `LABELS?`
Toggles whether or not guide RNAs and viruses are labeled with their sequence.

#### `INITIAL-ARRAY-SIZE`
Controls the size of the bacterial CRISPR array when the model is initialized.

#### `MAX-VIRUS-TYPES`
Controls the diversity of the viruses that the cell encounters.

#### `PROCESSIVITY`
Controls the processivity of the cell's RNA polymerase. The value of the slider is the probability that the polymerase will fall off of the DNA before finishing transcription of the next spacer.

#### `CRISPR-FUNCTION`
Controls the level of expression of CRISPR in the cell. The value of the slider is the probability that an RNA polymerase will transcribe the CRISPR locus when it encounters its promoter.

### Plots and Monitors

#### `CRISPR ELEMENTS`
Plots the number of each component of the CRISPR system in the cell over time. These components include guide RNAs, Cas9 proteins, and Cas1-Cas2 complexes. The number of Cas9 proteins currently bound to a guide RNA is also plotted.

#### `GUIDE RNA COUNT`
Displays the current number of guide RNAs in the cell.

#### `CAS1/2 COUNT`
Displays the current number of Cas1-Cas2 complexes in the cell.

#### `CAS9 COUNT`
Displays the current number of Cas9 proteins in the cell.

#### `VIRUS COUNT`
Displays the current number of viruses in the cell.

#### `GUIDE RNAS`
Plots a histogram comparing the frequency of each guide RNA type currently in the cell (black bars) and the frequency of each viral spacer in the CRISPR array (red bars).

#### `BACTERIAL CRISPR ARRAY`
Shows the current state of the bacterium's CRISPR array. Viral spacers at the left or front of the list are the most recently added.

#### `LENGTH`
Displays the current length of the bacterium's CRISPR array.

## THINGS TO NOTICE

When the model is initially set up, all of the guide RNAs and Cas9 proteins are unbound. After starting the model, Cas9s quickly become bound to guide RNAs. Does every Cas9 have a guide RNA? Why is this the case?

Look at the CRISPR Elements plot or the monitors below it and compare the number of guide RNAs to the number of Cas9 proteins. Why is it advantageous for the cell to have more of one than the other?

Look at the CRISPR Elements plot or the monitors below it and compare the number of Cas9 proteins to the number of Cas1-Cas2 complexes. Why are there fewer Cas1-Cas2 complexes, even though each gene in the locus is transcribed the same number of times?

Look at the Guide RNA histogram. The red bars show the frequency of each type of spacer in the CRISPR array, and the black bars show the frequency of the resulting guide RNAs in the cell. If two types of spacer each occur in the array the same number of times, do they always result in the same number of guide RNAs being produced? Similarly, if one type of spacer occurs in the array many times, does it ever result in fewer guide RNAs than a spacer type that only occurs a few times? In each of these cases, what makes some spacers result in more guide RNAs than others? It may help to also look at the Bacterial CRISPR Array monitor below the plot.

The `COMMON-INFECTION` and `RANDOM-INFECTION` buttons allow the user to test how the cell fights off different types of viruses. The `RANDOM-INFECTION` button introduces a random virus within the level of diversity specified by the `MAX-VIRUS-TYPES` slider into the cell. The `COMMON-INFECTION` button introduces a virus that the cell has seen either very recently or very often (suggesting it is common in the environment) into the cell. Is there a difference in how often these two types of infection succeed? Why do you think that is?

## THINGS TO TRY

How does changing the amount of viral diversity in the external environment influence the cell's ability to fight off infections? This can be accomplished using the `MAX-VIRUS-TYPES` slider. Does it make a difference for both random and common infections, or just one of these infection types?

Changes to the cell's regulation of CRISPR can have a large influence on its efficacy. This can be seen by manipulating the `GUIDE-UNBIND-CHANCE`, `PROCESSIVITY`, and `CRISPR-FUNCTION` sliders. Try to understand what effect each slider has individually. First, the `GUIDE-UNBIND-CHANCE` slider sets how likely it is for guide RNAs to unbind from Cas9 proteins on each tick. Why do you think this might make a difference to the cell? How does changing this slider affect the proportion of Cas9s bound to a guide RNA? Secondly, the `PROCESSIVITY` slider changes how likely it is for RNA polymerases to continue on after finishing transcription of a particular spacer in the array. How does changing this slider affect the number of guide RNAs in the cell? On the Guide RNAs histogram, can you tell why this number changes? Which spacers are most strongly affected by it? Finally, how do the levels of the CRISPR components in the cell change when you increase or decrease the `CRISPR-FUNCTION` slider?

After investigating how using these sliders affects the state of the cell, test how these changes affect the effectiveness of the CRISPR defense system. Do any of these changes affect all types of infections equally? Do some have a greater effect on common infections than random infections or vice versa?

## EXTENDING THE MODEL

One simple extension to the model involves the way viruses are treated after being inactivated. If an invading virus is cut up either by CRISPR or by an innate defense system, it takes some time for the resulting inactive fragments to be completely disassembled. Cas1-Cas2 complexes are able to add spacers during this period, increasing the likelihood that a virus could be fought off in the future. However, the current model treats these fragments as being fully disassembled almost instantly.

This model currently focuses on the role of CRISPR in bacterial defense, and only treats the innate defenses abstractly. An updated version of the model could explicitly include different innate bacterial systems. It could also more accurately treat the cell's ability to direct CRISPR components to act non-randomly, for example by recruiting Cas9 or Cas1-Cas2 complexes to the site of an infection.

Similarly, in this model, viruses are mostly passive invaders, simply diffusing inwards until they reach the genome. In reality, they can be transcribed earlier that that, and this can allow them to actively fight back against bacterial defenses. One interesting extension of this model would be to include more active viruses to showcase the interplay between bacterial defenses and viral evasion tactics.

The model also focuses on the initial stages of a viral infection, but CRISPR can continue to have interesting effects in the later stages. For example, even if the bacterium succumbs to the infection, CRISPR may be able to destroy newly produced viruses before they can be released. To see these effects, the model could be expanded to a longer infection timeline, including viral inhibition of normal transcription, production of new viruses, and using a different criterion for determining the end of an infection.

Another interesting effect that follows naturally from a longer infection timeline would be a treatment of _lysogenic_ infections. Currently, all viruses are assumed to be _lytic_, meaning when they infect a cell they reproduce until the cell dies and releases the new viral particles. While this is true for many viruses, there are also some which are lysogenic. These viruses can insert their DNA into the bacterium's genome. This allows them to 'reproduce' when the bacterium divides, and then revert back to the lytic process described above when their host is in poor health. After the viral DNA is inserted into the bacterial genome, there are several strategies the cell can employ based on its different regulatory machinery. For example, CRISPR may cleave the cell's genome, resulting in the bacterium's death, or simply suppress viral replication when the virus attempts to become lytic again. Modeling these regulatory 'decisions' could be very interesting.

## NETLOGO FEATURES

This model has specific turtle shapes that are able to combine with the shapes of other turtles to form new shapes when they are interacting. For example, when proteins bind to nucleic acids (guide RNAs or viruses), their shapes interact so that the proteins appear to be carrying the bound nucleic acid. This functionality relies on using the agent breed declarations to specify the z-ordering of how they are displayed. Specifically, agent breeds that are declared first (closer to the top of the file) will always be displayed 'under' breeds that are declared later (closer to the end of the file).

This model employs a supplementary function to improve auto scaling behavior for histograms. By default, histograms only autoscale the y-axis. The `update-histogram-ranges` function used here implements x-axis auto scaling which can increase but never decrease the range, similar to the default y-axis auto scaling. It also implements y-axis scaling which can increase or decrease the plot's range. This makes the histogram always take up most of the plot area while keeping the entire histogram visible and minimizing the number of rescaling events.

## RELATED MODELS

CRISPR Ecosystem
CRISPR Ecosystem LevelSpace
CRISPR Bacterium LevelSpace

## CREDITS AND REFERENCES

The image of a CRISPR locus was adapted by Merry Youle of the Small Things Considered blog for their article [Six Questions About CRISPRs](https://schaechter.asmblog.org/schaechter/2011/04/six-questions-about-crisprs.html) from Sorek, R., Kunin, V. & Hugenholz, P. CRISPR - a widespread system that provides acquired resistance against phages in bacteria and archaea. _Nature Reviews Microbiology_ **6**, 181-186 (2008).

For general information about CRISPR, visit https://sites.tufts.edu/crispr/ or see the review below:

  * Barrangou, R. & Marraffini, L. A. CRISPR-Cas Systems: Prokaryotes Upgrade to Adaptive Immunity. _Molecular Cell_ **54**, 234–244 (2014).

For information relevant to possible extensions to the model, see the articles below:

  * Edgar, R. & Qimron, U. The E_scherichia coli_ CRISPR System Protects from Lysogenization, Lysogens, and Prophage Induction. _Journal of Bacteriology_ **192**, 6291–6294 (2010).
  * Labrie, S. J., Samson, J. E. & Moineau, S. Bacteriophage resistance mechanisms. _Nature Reviews Microbiology_ **8**, 317–327 (2010).
  * Modell, J. W., Jiang, W. & Marraffini, L. A. CRISPR–Cas systems exploit viral DNA injection to establish and maintain adaptive immunity. _Nature_ **544**, 101–104 (2017).
  * Samson, J. E., Magadán, A. H., Sabri, M. & Moineau, S. Revenge of the phages: defeating bacterial defences. _Nature Reviews Microbiology_ **11**, 675–687 (2013).
  * Strotskaya, A. et al. The action of _Escherichia coli_ CRISPR–Cas system on lytic bacteriophages with different lifestyles and development strategies. _Nucleic Acids Research_ **gkx042** (2017). doi:10.1093/nar/gkx042

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Woods, P. and Wilensky, U. (2019).  NetLogo CRISPR Bacterium model.  http://ccl.northwestern.edu/netlogo/models/CRISPRBacterium.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2019 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

<!-- 2019 Cite: Woods, P. -->]]></info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="0" y="150"></point>
        <point x="105" y="150"></point>
        <point x="105" y="293"></point>
        <point x="195" y="293"></point>
        <point x="195" y="150"></point>
        <point x="300" y="150"></point>
      </polygon>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="cas dimer" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="75" y="90"></point>
        <point x="60" y="105"></point>
        <point x="60" y="195"></point>
        <point x="75" y="210"></point>
        <point x="105" y="210"></point>
        <point x="135" y="165"></point>
        <point x="165" y="165"></point>
        <point x="195" y="210"></point>
        <point x="225" y="210"></point>
        <point x="240" y="195"></point>
        <point x="240" y="105"></point>
        <point x="225" y="90"></point>
        <point x="195" y="90"></point>
        <point x="165" y="135"></point>
        <point x="135" y="135"></point>
        <point x="105" y="90"></point>
      </polygon>
    </shape>
    <shape name="cas9" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
        <point x="75" y="195"></point>
        <point x="105" y="225"></point>
        <point x="150" y="240"></point>
        <point x="195" y="225"></point>
        <point x="225" y="195"></point>
        <point x="240" y="150"></point>
        <point x="225" y="105"></point>
        <point x="195" y="75"></point>
        <point x="165" y="150"></point>
        <point x="135" y="150"></point>
        <point x="105" y="75"></point>
        <point x="75" y="105"></point>
      </polygon>
    </shape>
    <shape name="cas9 bound" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="90" marked="false" color="-684578305" endY="120" startX="30" filled="true"></rectangle>
      <rectangle endX="270" startY="135" marked="false" color="751909887" endY="165" startX="30" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
        <point x="75" y="195"></point>
        <point x="105" y="225"></point>
        <point x="150" y="240"></point>
        <point x="195" y="225"></point>
        <point x="225" y="195"></point>
        <point x="240" y="150"></point>
        <point x="225" y="105"></point>
        <point x="195" y="75"></point>
        <point x="165" y="150"></point>
        <point x="135" y="150"></point>
        <point x="105" y="75"></point>
        <point x="75" y="105"></point>
      </polygon>
    </shape>
    <shape name="cas9 guided" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="135" marked="false" color="751909887" endY="165" startX="30" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="60" y="150"></point>
        <point x="75" y="195"></point>
        <point x="105" y="225"></point>
        <point x="150" y="240"></point>
        <point x="195" y="225"></point>
        <point x="225" y="195"></point>
        <point x="240" y="150"></point>
        <point x="225" y="105"></point>
        <point x="195" y="75"></point>
        <point x="165" y="150"></point>
        <point x="135" y="150"></point>
        <point x="105" y="75"></point>
        <point x="75" y="105"></point>
      </polygon>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="cylinder" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="line half" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="150" startX="150"></line>
    </shape>
    <shape name="pentagon" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="rnap" rotatable="true" editableColorIndex="0">
      <circle x="45" y="75" marked="true" color="-1920102913" diameter="150" filled="true"></circle>
      <circle x="105" y="75" marked="true" color="-1920102913" diameter="150" filled="true"></circle>
    </shape>
    <shape name="sheep" rotatable="false" editableColorIndex="15">
      <circle x="203" y="65" marked="true" color="-1" diameter="88" filled="true"></circle>
      <circle x="70" y="65" marked="true" color="-1" diameter="162" filled="true"></circle>
      <circle x="150" y="105" marked="true" color="-1" diameter="120" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="218" y="120"></point>
        <point x="240" y="165"></point>
        <point x="255" y="165"></point>
        <point x="278" y="120"></point>
      </polygon>
      <circle x="214" y="72" marked="false" color="-1920102913" diameter="67" filled="true"></circle>
      <rectangle endX="179" startY="223" marked="true" color="-1" endY="298" startX="164" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="45" y="285"></point>
        <point x="30" y="285"></point>
        <point x="30" y="240"></point>
        <point x="15" y="195"></point>
        <point x="45" y="210"></point>
      </polygon>
      <circle x="3" y="83" marked="true" color="-1" diameter="150" filled="true"></circle>
      <rectangle endX="80" startY="221" marked="true" color="-1" endY="296" startX="65" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="195" y="285"></point>
        <point x="210" y="285"></point>
        <point x="210" y="240"></point>
        <point x="240" y="210"></point>
        <point x="195" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="276" y="85"></point>
        <point x="285" y="105"></point>
        <point x="302" y="99"></point>
        <point x="294" y="83"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="219" y="85"></point>
        <point x="210" y="105"></point>
        <point x="193" y="99"></point>
        <point x="201" y="83"></point>
      </polygon>
    </shape>
    <shape name="square" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="stripe" rotatable="false" editableColorIndex="0">
      <rectangle endX="285" startY="135" marked="true" color="-1920102913" endY="165" startX="15" filled="true"></rectangle>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="wolf" rotatable="false" editableColorIndex="0">
      <polygon color="255" filled="true" marked="false">
        <point x="253" y="133"></point>
        <point x="245" y="131"></point>
        <point x="245" y="133"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="2" y="194"></point>
        <point x="13" y="197"></point>
        <point x="30" y="191"></point>
        <point x="38" y="193"></point>
        <point x="38" y="205"></point>
        <point x="20" y="226"></point>
        <point x="20" y="257"></point>
        <point x="27" y="265"></point>
        <point x="38" y="266"></point>
        <point x="40" y="260"></point>
        <point x="31" y="253"></point>
        <point x="31" y="230"></point>
        <point x="60" y="206"></point>
        <point x="68" y="198"></point>
        <point x="75" y="209"></point>
        <point x="66" y="228"></point>
        <point x="65" y="243"></point>
        <point x="82" y="261"></point>
        <point x="84" y="268"></point>
        <point x="100" y="267"></point>
        <point x="103" y="261"></point>
        <point x="77" y="239"></point>
        <point x="79" y="231"></point>
        <point x="100" y="207"></point>
        <point x="98" y="196"></point>
        <point x="119" y="201"></point>
        <point x="143" y="202"></point>
        <point x="160" y="195"></point>
        <point x="166" y="210"></point>
        <point x="172" y="213"></point>
        <point x="173" y="238"></point>
        <point x="167" y="251"></point>
        <point x="160" y="248"></point>
        <point x="154" y="265"></point>
        <point x="169" y="264"></point>
        <point x="178" y="247"></point>
        <point x="186" y="240"></point>
        <point x="198" y="260"></point>
        <point x="200" y="271"></point>
        <point x="217" y="271"></point>
        <point x="219" y="262"></point>
        <point x="207" y="258"></point>
        <point x="195" y="230"></point>
        <point x="192" y="198"></point>
        <point x="210" y="184"></point>
        <point x="227" y="164"></point>
        <point x="242" y="144"></point>
        <point x="259" y="145"></point>
        <point x="284" y="151"></point>
        <point x="277" y="141"></point>
        <point x="293" y="140"></point>
        <point x="299" y="134"></point>
        <point x="297" y="127"></point>
        <point x="273" y="119"></point>
        <point x="270" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="-1" y="195"></point>
        <point x="14" y="180"></point>
        <point x="36" y="166"></point>
        <point x="40" y="153"></point>
        <point x="53" y="140"></point>
        <point x="82" y="131"></point>
        <point x="134" y="133"></point>
        <point x="159" y="126"></point>
        <point x="188" y="115"></point>
        <point x="227" y="108"></point>
        <point x="236" y="102"></point>
        <point x="238" y="98"></point>
        <point x="268" y="86"></point>
        <point x="269" y="92"></point>
        <point x="281" y="87"></point>
        <point x="269" y="103"></point>
        <point x="269" y="113"></point>
      </polygon>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <previewCommands>setup repeat 75 [ go ]</previewCommands>
</model>
