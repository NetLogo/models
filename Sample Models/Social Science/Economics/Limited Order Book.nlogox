<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0.0-internal1" snapToGrid="true">
  <code><![CDATA[;;; Global variables
globals [
  ; Global statistics
  trade-unit
  global-cash
  global-devotion
  global-tokens

  ; Global status
  asks          ; list<order>, Listed selling orders.
  bids          ; list<order>, Listed buying orders.
  latest-volume ; number, Latest average trading price (in $).
  latest-amount ; number, Latest trading amount (in $)
  latest-price  ; number, Latest average trading price (in $).
  total-volume  ; number, Total trading volume.
  total-amount  ; number, Total trading amount (in $)

  ; Some cache to improve the computational performance
  best-bid-price
  best-ask-price
  recent-price
  recent-amount
  recent-volume
  recent-change
  price-to-date
]

breed [ orders order ]  ; Each order (which is, in our case, always limited) is represented as a turtle.
orders-own [
  pending?    ; boolean, Whether the order is still pending? (and therefore, not matched yet and not visible to other pops)
  removed?    ; Whether the order has been removed? (we intend to reuse the turtle structure for optimization)
  buy-side?   ; boolean, True/Buy, False/Sell
  price       ; number, Price Limit
  quantity    ; number, Size of the order
  owner       ; turtle, Owner Turtle
  remaining   ; number, Remaining quantity of the order
]

; Each behavioral agent is represented as a turtle.
; Trader: represents a party that is capable to trade the token (representing gold, silver, stock, cryptocurrency token, etc).
breed [ traders trader ]
traders-own [
  cash       ; number, Cash at hand
  stockpile  ; table (or map) between <any, number>, Stockpile of the trader
  my-bid      ; order, The bidding order of mine
  my-ask      ; order, The asking order of mine
  belief     ; number, Constant belief of the price ($)
  utility    ; number, Cash + Belief * Stockpile ($)
  initial-utility ; number, utility value before the trading starts
  strategy   ; number, pre-defined strategy of the trader
]

;;; Backbone of the model
; setup: Initialize the model
to setup
  clear-all
  reset-ticks

  create-turtles 1 [
    set shape "circle"
  ]

  ; Create and populate traders
  create-traders honest-traders [
    set strategy "honest"
  ]
  create-traders cunning-traders [
    set strategy "cunning"
  ]

  ; Both kind of traders receive initial assets under the same rule
  ask traders [
    populate-trader
    set cash get-random-amount initial-cash
    set stockpile get-random-amount initial-tokens
    set belief get-random-amount initial-belief
    set utility cash + belief * stockpile
    set initial-utility utility
  ]
  arrange-traders

  ; Calculate the global statistics
  set global-tokens max list sum [ stockpile ] of traders 1
  set global-cash max list sum [ cash ] of traders 1

  ; Trade unit is calculated by the trade precision (e.g. precision=0, unit=1; precision=2, unit=0.01)
  set trade-unit 10 ^ (trade-precision * -1)
  render-traders
end

; go: Loop of the model
to go
  ; Clear previous orders
  let previous-price latest-price
  set asks []
  set bids []

  ; Ask people to trade
  ask traders [
    if strategy = "honest" [ honest-strategy ]
    if strategy = "cunning" [ cunning-strategy ]
    set utility cash + belief * stockpile
  ]
  matchmake-all
  calculate-info previous-price

  ; When there are no referencing prices, use the latest price to help inform traders
  ifelse length bids > 0 and length asks > 0 [
    set best-bid-price [ price ] of item 0 bids
    set best-ask-price [ price ] of item 0 asks
  ] [ calculate-best-order latest-price ]

  ; Finish the tick
  render-traders
  tick
end

; Calculate some information for the next tick
to calculate-info [ previous-price ]
  ifelse previous-price = 0 [
    set recent-change 0
    set recent-amount latest-amount
    set recent-volume latest-volume
    set recent-price latest-price
  ] [
    ifelse latest-amount > 0 [
      set recent-change moving-average recent-change ln (latest-price / previous-price)
      set recent-amount moving-average recent-amount latest-amount
      set recent-volume moving-average recent-volume latest-volume
      set recent-price recent-volume / recent-amount
    ] [
      set recent-change moving-average recent-change 0
    ]
  ]
  set price-to-date total-volume / total-amount
end

; honest-strategy: The "Honest" strategy
to honest-strategy
  if cash >= belief [
    submit-order my-bid belief 1
  ]
  if stockpile > 0 [
    ; We seek to prevent trading with oneself, and this is the easiest way - just add 0.01 to avoid it
    submit-order my-ask 0.01 + belief 1
  ]
end

; honest-strategy: The "Cunning" strategy
to cunning-strategy
  ; Get the best selling price and use it, if it is lower than my belief
  let purchase-price belief
  if best-ask-price != 0 and best-ask-price < purchase-price [ set purchase-price best-ask-price ]
  ; Get the best buying price and use it, if it is higher than my belief
  let sell-price belief + 0.01
  if best-bid-price > sell-price [ set sell-price best-bid-price ]
  ; Submit the orders
  if (cash >= purchase-price) [
    submit-order my-bid purchase-price 1
  ]
  if (stockpile > 0) [
    submit-order my-ask sell-price 1
  ]
end

;;; Helper: Distribution
; random-amount: Get a random amount of a uniform distribution from [amount/2, amount]
to-report get-random-amount [ amount ]
  report random amount * 0.5 + amount * 0.5
end

; moving-average: Get exponentially weighted moving average. 0 is impossible for price, so we treat it as NULL.
to-report moving-average [ existing-value new-value ]
  let weight 0.1
  report existing-value * (1 - weight) + new-value * weight
end

;;; Helper: Renderer
; Render all traders.
to render-traders
  if latest-amount = 0 [ stop ]
  ; Traders
  ask traders [
    set label precision stockpile trade-precision
  ]
  ; Market
  ask turtle 0 [
    set size sqrt latest-amount
    ifelse recent-change > 0 [
      set color scale-color red (recent-change / recent-price) 200 0
    ] [
      set color scale-color green (recent-change / recent-price) -200 0
    ]
  ]
end

; Arrange the traders in a circle.
to arrange-traders
  if behaviorspace-run-number != 0 [ stop ]
  let index 0
  let angle 360 / count traders
  ; We want to keep traders in the same order even when you dynamically introduce new trader.
  ; With "ask turtles", once new traders get introduced, we would get into trouble.
  foreach sort-on [who] traders [
    the-trader ->
      ask the-trader [
        setxy 0 0
        set heading index * angle
        fd max-pxcor * 0.9
      ]
      set index index + 1
  ]
end

; The following code is the basis of the matchmake mechanism
;;; Mechanism-related code
; This serves as a constructor which needs to be executed to initialize the trader
to populate-trader
  set my-bid spawn-order true
  set my-ask spawn-order false
  set size 2
end

; Spawn an order and return it / turtle-context
to-report spawn-order [ s ]
  let current 0
  hatch-orders 1 [
    set buy-side? s
    set pending? false
    set removed? true
    set hidden? true
    set current self
    set owner myself
  ]
  report current
end

; We are trying to re-use orders to boost the performance of traders
; s accepts an order; p means price; q means quantity.
to submit-order [ s p q ]
  if p <= 0 [ error "Price cannot go below zero!" ]
  if q <= 0 [ error "Quantity cannot go below zero!" ]
  ask s [
    set removed? false
    set pending? true
    set price p
    set quantity q
    set remaining q
  ]
end

; Matchmake all pending? orders
; All pending? orders are randomly sent to the market and get matched
; See the info tab for more details
to matchmake-all
  set latest-amount 0
  set latest-volume 0
  calculate-best-order 0
  let eligible-orders orders with [ removed? = false and pending? = true ]
  ask eligible-orders [ matchmake ]
  if latest-amount > 0 [ set latest-price latest-volume / latest-amount ]
end

; Matchmake a single pending? order
; If a trader run out of money/stockpile, the orders we touched will be cancelled
to matchmake
  set pending? false
  ; Deal with the order: if the order is fully fulfilled, we stop and skip the listing process
  ifelse buy-side? [
    ; Remove impossible orders to optimize the performance
    if price < best-ask-price [
      set removed? true
      stop
    ]
    ; Buy order
    while [ length asks > 0 and [ price ] of first asks < price ] [
      execute-order self first asks
      if removed? = true [ stop ]
    ]
  ] [
    ; Remove impossible orders to optimize the performance
    if price > best-bid-price [
      set removed? true
      stop
    ]
    ; Sell order
    while [ length bids > 0 and [ price ] of first bids > price ] [
      execute-order first bids self
      if removed? = true [ stop ]
    ]
  ]
  ; Finish the process and list this offer
  ; Here, we linearly find the proper position of this offer, and insert it
  ifelse buy-side? [
    let len length bids
    ifelse len = 0 [
      set bids (list self)
    ] [
      let index 0
      while [ index < len and [ price ] of (item index bids) > price ] [ set index index + 1 ]
      set bids insert-item index bids self
    ]
  ] [
    let len length asks
    ifelse len = 0 [
      set asks (list self)
    ] [
      let index 0
      while [ index < len and [ price ] of (item index asks) < price ] [ set index index + 1 ]
      set asks insert-item index asks self
    ]
  ]
end

; Calculate "Best" orders (the buying order with the highest price; the selling order with the lowest price)
to calculate-best-order [ default ]
  let best-bid max-one-of orders with [ removed? = false and buy-side? = true ] [ price ]
  set best-bid-price ifelse-value best-bid = nobody [ default * 0.999 ] [ [ price ] of best-bid ]
  let best-ask min-one-of orders with [ removed? = false and buy-side? = false ] [ price ]
  set best-ask-price ifelse-value best-ask = nobody [ default * 1.001 ] [ [ price ] of best-ask ]
end

; Order sorter (by price, asc)
; Implicit tiebreaker: time of the order (older orders get prioritized)
to-report min-order [ order1 order2 ]
  if order1 = nobody or [ removed? ] of order1 [
    ifelse order2 = nobody or [ removed? ] of order2
      [ report nobody ]
      [ report order2 ]
  ]
  if order2 = nobody or [ removed? ] of order2 [ report order1 ]
  ifelse [ price ] of order1 > [ price ] of order2
  [ report order2 ]
  [ report order1 ]
end

; Order sorter (by price, descending)
; Implicit tiebreaker: time of the order (older orders get prioritized)
to-report max-order [ order1 order2 ]
  if order1 = nobody or [ removed? ] of order1 [
    ifelse order2 = nobody or [ removed? ] of order2
      [ report nobody ]
      [ report order2 ]
  ]
  if order2 = nobody or [ removed? ] of order2 [ report order1 ]
  ifelse [ price ] of order1 < [ price ] of order2
  [ report order2 ]
  [ report order1 ]
end

; Try to execute the two orders
to execute-order [ bid-order ask-order ]
  let bidder [ owner ] of bid-order
  let asker [ owner ] of ask-order
  ; For now, the lowest price will be used
  let deal-price min (list [ price ] of bid-order [ price ] of ask-order)
  ; Calculate the maximum available
  let bidder-maximum floor-to-unit ([ [ cash ] of bidder / deal-price ] of bid-order)
  if bidder-maximum <= 0 [ ask bid-order [ remove-order ] stop ]
  let asker-maximum [ stockpile ] of asker
  if asker-maximum <= 0 [ ask ask-order [ remove-order ] stop ]
  ; Calculate the amount
  let deal-amount min (list
    [ remaining ] of bid-order
    [ remaining ] of ask-order
    bidder-maximum asker-maximum
  )
  ; Deal!
  ask bidder [
    set cash cash - deal-amount * deal-price
    set stockpile stockpile + deal-amount
  ]
  ask asker [
    set cash cash + deal-amount * deal-price
    set stockpile stockpile - deal-amount
  ]
  ; Record it
  set latest-amount latest-amount + deal-amount
  set total-amount total-amount + deal-amount
  set latest-volume latest-volume + deal-amount * deal-price
  set total-volume total-volume + deal-amount * deal-price
  ; Change the orders
  ask (turtle-set bid-order ask-order) [
    set remaining remaining - deal-amount
    check-order
  ]
end

; Check whether a given order is done and needs to be removed
to check-order
  if remaining = 0 [ remove-order ]
end

; Forcibly remove an order.
to remove-order
  ifelse buy-side? [
    set bids remove self bids
  ] [
    set asks remove self asks
  ]
  set pending? false
  set removed? true
end

; Clamp the number between a range.
to-report clamp [ min-value source max-value ]
  ifelse source > max-value [ report max-value ]
  [ ifelse source < min-value [ report min-value ] [ report source ] ]
end

; Floor to individual trade units
to-report floor-to-unit [ source ]
  report floor (source / trade-unit) * trade-unit
end


; Copyright 2021 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <widgets>
    <view x="203" maxPycor="20" updateMode="1" wrappingAllowedX="false" y="10" frameRate="30.0" minPycor="-20" height="542" showTickCounter="true" patchSize="13.0" fontSize="13" wrappingAllowedY="false" width="541" tickCounterLabel="ticks" maxPxcor="20" minPxcor="-20"></view>
    <button x="15" y="11" height="33" disableUntilTicks="false" forever="false" kind="Observer" width="80">setup
</button>
    <button x="15" y="43" height="33" disableUntilTicks="true" forever="false" kind="Observer" width="80" display="go-once">go</button>
    <button x="100" y="10" height="65" disableUntilTicks="true" forever="true" kind="Observer" width="85">go</button>
    <monitor x="960" precision="2" y="35" height="45" fontSize="11" width="113" sizeVersion="0" display="Price to Date$">price-to-date</monitor>
    <monitor x="760" precision="2" y="35" height="45" fontSize="11" width="103" sizeVersion="0" display="Latest Price$">latest-price</monitor>
    <monitor x="856" precision="2" y="35" height="45" fontSize="11" width="105" sizeVersion="0" display="Latest Volume$">latest-volume</monitor>
    <monitor x="1195" precision="2" y="35" height="45" fontSize="11" width="89" sizeVersion="0" display="Total Cash$">global-cash</monitor>
    <monitor x="1071" precision="2" y="35" height="45" fontSize="11" width="125" sizeVersion="0" display="Circulating Tokens">global-tokens</monitor>
    <plot x="760" yMax="5.0" yAxis="Price" y="91" xMin="0.0" height="150" legend="true" xMax="20.0" autoplot="true" yMin="5.0" width="525" sizeVersion="0" xAxis="Ticks" display="Trading Prices">
      <setup></setup>
      <update></update>
      <pen color="-13345367" legend="true" interval="1.0" mode="0" display="Latest">
        <setup></setup>
        <update><![CDATA[if ticks > 0 [ plot latest-price ]]]></update>
      </pen>
    </plot>
    <note x="14" y="120" height="18" backgroundDark="0" textColorLight="-16777216" backgroundLight="0" fontSize="12" width="150">Basic Parameters</note>
    <slider x="12" step="1" y="138" height="33" min="0" direction="Horizontal" max="3" default="0.0" variable="trade-precision" width="172" sizeVersion="0" display="trade-precision"></slider>
    <note x="13" y="187" height="18" backgroundDark="0" textColorLight="-16777216" backgroundLight="0" fontSize="12" width="150"><![CDATA[Traders & Strategies]]></note>
    <slider x="12" step="1" y="207" height="33" min="0" direction="Horizontal" max="100" default="50.0" variable="honest-traders" width="172" sizeVersion="0" display="honest-traders"></slider>
    <slider x="12" step="1" y="248" height="33" min="0" direction="Horizontal" max="100" default="50.0" variable="cunning-traders" width="172" sizeVersion="0" display="cunning-traders"></slider>
    <note x="760" y="14" height="18" backgroundDark="0" textColorLight="-16777216" backgroundLight="0" fontSize="12" width="150">Market situation</note>
    <note x="762" y="262" height="18" backgroundDark="0" textColorLight="-16777216" backgroundLight="0" fontSize="12" width="150">Utility distribution</note>
    <monitor x="760" precision="0" y="284" height="45" fontSize="11" width="108" sizeVersion="0" display="Total Utilities">sum [ utility ] of traders</monitor>
    <monitor x="867" precision="0" y="284" height="45" fontSize="11" width="117" sizeVersion="0" display="Average Utilities">mean [ utility ] of traders</monitor>
    <monitor x="982" precision="0" y="284" height="45" fontSize="11" width="86" sizeVersion="0" display="Avg (Honest)">mean [ utility ] of traders with [ strategy = "honest" ]</monitor>
    <monitor x="1066" precision="0" y="284" height="45" fontSize="11" width="96" sizeVersion="0" display="Avg (Cunning)">mean [ utility ] of traders with [ strategy = "cunning" ]</monitor>
    <monitor x="1161" precision="3" y="284" height="45" fontSize="11" width="125" sizeVersion="0" display="Cunning : Honest %">mean [ utility ] of traders with [ strategy = "cunning" ] / mean [ utility ] of traders with [ strategy = "honest" ] * 100</monitor>
    <plot x="760" yMax="10.0" yAxis="Utilities" y="339" xMin="0.0" height="150" legend="true" xMax="10.0" autoplot="true" yMin="0.0" width="527" sizeVersion="0" xAxis="Ticks" display="Average Utilities Gain (%)">
      <setup></setup>
      <update></update>
      <pen color="-11053225" legend="true" interval="1.0" mode="0" display="Everyone">
        <setup></setup>
        <update>if count traders = 0 [ stop ]
plot mean [ utility / initial-utility * 100 - 100 ] of traders</update>
      </pen>
      <pen color="-13345367" legend="true" interval="1.0" mode="0" display="Cunning">
        <setup></setup>
        <update>if count traders with [ strategy = "cunning" ] = 0 [ stop ]
plot mean [ utility / initial-utility * 100 - 100 ] of traders with [ strategy = "cunning" ]</update>
      </pen>
      <pen color="-10899396" legend="true" interval="1.0" mode="0" display="Honest">
        <setup></setup>
        <update>if count traders with [ strategy = "honest" ] = 0 [ stop ]
plot mean [ utility / initial-utility * 100 - 100 ] of traders with [ strategy = "honest" ]</update>
      </pen>
    </plot>
    <slider x="12" step="1" y="290" height="33" min="0" direction="Horizontal" max="2000" default="1000.0" variable="initial-cash" units="$" width="172" sizeVersion="0" display="initial-cash"></slider>
    <slider x="12" step="1" y="332" height="33" min="0" direction="Horizontal" max="200" default="50.0" variable="initial-tokens" width="172" sizeVersion="0" display="initial-tokens"></slider>
    <slider x="11" step="1" y="375" height="33" min="0" direction="Horizontal" max="100" default="25.0" variable="initial-belief" width="172" sizeVersion="0" display="initial-belief"></slider>
  </widgets>
  <info><![CDATA[## WHAT IS IT?

This model aims to reproduce phenomena that emerge in modern-day cryptocurrency markets, but is general enough to model any resource traded using the concept of a limited order book. A Limited Order Book is a simple idea: it is a record of outstanding limit orders maintained by a stock exchange. A limit order is a type of order to buy or sell a security at a specific price or better. The simple act of buying and selling in this manner creates complex behaviors at the level of the exchange.

## HOW IT WORKS

In this model, each trader holds some `cash`, some tokens (`stockpile`), and trades in the same limited order book. Tokens can be thought of as any tradable good, such as gold, silver, oil, stocks, or cryptocurrency such as Bitcoin or Ethereum. Each trader also holds a firm and constant `belief` in the value of tokens, which is randomly set somewhere in the interval [initial-belief / 2, initial-belief] during the initialization of the model.

Time is split into multiple slices and represented as ticks. In each tick, each trader uses a pre-determined strategy to put limited orders on the market. Then, the matchmaking process starts between buyers and sellers. First, we create two empty lists to store pending orders. Then, since we assume that each trader has an equal opportunity of trading, we match each order randomly, during which:

1. If it is a SELL order, we try to find if any of the unmatched BUY orders at the stated sale price or higher. If so, we will execute the order sale at the highest possible price and the two parties will exchange tokens and cash.
2. We repeat this process until there are no remaining matching BUY orders or the selling order is completely executed (this means if you sell 100 tokens, they might not all sell to the same buyer).
2. If the SELL order is not fully executed, we will put it into the unmatched list for selling orders, waiting for other buying orders to pick it up.

For BUY orders, we go through the same process but with an opposite bias. In other words, we try to match BUY orders to _cheaper_ prices.

Consequently, the market price of the token, as well as the other information available in the market, is calculated and provided to traders in the next tick.

In this fairly simplified model, we only implement two simple trading strategies.

The first one is called "honest", in which the trader will always try to buy and sell tokens at a price according to his/her belief of the value of that token.

The second strategy we call "cunning" and is slightly more complicated. Here, the trader will always buy with a price of either the best-selling-price or their belief (whichever is smaller) and sell with a price of either the best-buying-price or their belief (whichever is larger).

Note that after the matchmaking process, both strategies will cancel unfulfilled orders and issue new ones rather than keeping the orders on the exchange.

## HOW TO USE IT

### Basic Usage
* SETUP button resets the model.
* GO button allows the model to continuously simulate the market.
* GO-ONCE button asks the model to simulate the market for 1 tick.

### Parameters
The following parameters affect how the market works in this model.

* The TRADE-PRECISION slider sets the maximum precision for the number of tokens for each trade. For example, if you set it to 0, the minimum trade unit would be 10^0 = 1. If you set it to 1, the minimum trade unit would be 10^(-1) = 0.1. Default is 1. This models the fact that these currencies are often sold in very small units.
* The HONEST-TRADERS slider determines how many traders with the "honest" strategy will be spawned during the setup process.
* The CUNNING-TRADERS slider determines how many traders with the "cunning" strategy will be spawned during the setup process.

The below parameters all set the maximum amount of CASH, TOKENS, and BELIEF for each agent. Each is initialized according to a random draw from a uniform distribution on the interval [amount/2, amount]:
* The INITIAL-CASH slider sets the maximum cash each trader will receive when the model is initialized.
* The INITIAL-TOKENS slider sets the maximum tokens each trader will receive when the model is initialized.
* The INITIAL-BELIEF slider determines the maximum initial BELIEF of each trader.

### Plots and Monitors
The plots and monitors give you a set of tools to measure the market as it transacts.

* The **Trading Prices** plot allows you to watch the daily trading prices.
* The **Average Utilities Gain** plot allows you to follow the _average utility gain_ of traders with different strategies. Utility, in this model, is defined as the sum of cash and value of the stockpile (cash + belief * stockpile).

## THINGS TO NOTICE

* Notice that trading seems to stop only a few hundred ticks into running the model. Why might that be the case? How might you make trading continue longer without changing the code of the model?
* Notice that the sum of each traders' utilities is increasing, no matter how many honest or cunning traders are spawned. Why might this  happen? Does everyone in the market equally share the gains? Why or why not?

## THINGS TO TRY

* **Make all traders honest or cunning.** How fast do traders stop trading in each of these situations?
* **Try to mix honest traders with cunning ones.** What happened to the utility gains relative to each other. Why does that occur?
* **Try first giving traders lots of CASH. Then trying giving traders lots of TOKENS.** How does the market behave differently across these two scenarios?

## EXTENDING THE MODEL

Try to create a more complicated trading strategy (there are a ton of possibilities)!

* You could try to allow traders to trade more than 1 unit of TOKENS each trade.
* You could also try to allow traders to change their belief in the value of the token according to some random factors or through watching the market dynamics.

## NETLOGO FEATURES

While in many NetLogo models we want to ask turtles to do things in a random order to not introduce bias toward particular turtles, here we use `foreach sort-on [who] traders` so that the traders are deterministically called by their `who` property and always rendered in the same order.This feature enables you to dynamically introduce traders into the model and keep its visualization stable and intact.

## RELATED MODELS

See the Bidding Market, simple economy, and Sugarscape models to explore more market or economy-related models.

## REFERENCES

1. Baker, J. and Wilensky, U. (2017). NetLogo Bidding Market model. http://ccl.northwestern.edu/netlogo/models/BiddingMarket. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.
2. Chen, J. (2021). Cryptocurrency Trading Model. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Chen, J. and Wilensky, U. (2021).  NetLogo Limited Order Book model.  http://ccl.northwestern.edu/netlogo/models/LimitedOrderBook.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

This model was developed as part of the Spring 2021 Multi-agent Modeling course offered by Dr. Uri Wilensky at Northwestern University. For more info, visit http://ccl.northwestern.edu/courses/mam/. Special thanks to Teaching Assistants Jacob Kelter, Leif Rasmussen, and Connor Bain.

## COPYRIGHT AND LICENSE

Copyright 2021 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This model is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

NetLogo itself is free software for non-commercial use under the terms of the GNU General Public License ([see full license information here](https://ccl.northwestern.edu/netlogo/docs/copyright.html)).

To inquire about commercial licenses for either NetLogo or specific models from the models library, please contact netlogo-commercial-admin@ccl.northwestern.edu.

<!-- 2021 MAM2021 Cite: Chen, J. -->]]></info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="0" y="150"></point>
        <point x="105" y="150"></point>
        <point x="105" y="293"></point>
        <point x="195" y="293"></point>
        <point x="195" y="150"></point>
        <point x="300" y="150"></point>
      </polygon>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="cylinder" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="line half" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="150" startX="150"></line>
    </shape>
    <shape name="pentagon" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="sheep" rotatable="false" editableColorIndex="15">
      <circle x="203" y="65" marked="true" color="-1" diameter="88" filled="true"></circle>
      <circle x="70" y="65" marked="true" color="-1" diameter="162" filled="true"></circle>
      <circle x="150" y="105" marked="true" color="-1" diameter="120" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="218" y="120"></point>
        <point x="240" y="165"></point>
        <point x="255" y="165"></point>
        <point x="278" y="120"></point>
      </polygon>
      <circle x="214" y="72" marked="false" color="-1920102913" diameter="67" filled="true"></circle>
      <rectangle endX="179" startY="223" marked="true" color="-1" endY="298" startX="164" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="45" y="285"></point>
        <point x="30" y="285"></point>
        <point x="30" y="240"></point>
        <point x="15" y="195"></point>
        <point x="45" y="210"></point>
      </polygon>
      <circle x="3" y="83" marked="true" color="-1" diameter="150" filled="true"></circle>
      <rectangle endX="80" startY="221" marked="true" color="-1" endY="296" startX="65" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="195" y="285"></point>
        <point x="210" y="285"></point>
        <point x="210" y="240"></point>
        <point x="240" y="210"></point>
        <point x="195" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="276" y="85"></point>
        <point x="285" y="105"></point>
        <point x="302" y="99"></point>
        <point x="294" y="83"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="219" y="85"></point>
        <point x="210" y="105"></point>
        <point x="193" y="99"></point>
        <point x="201" y="83"></point>
      </polygon>
    </shape>
    <shape name="square" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="wolf" rotatable="false" editableColorIndex="0">
      <polygon color="255" filled="true" marked="false">
        <point x="253" y="133"></point>
        <point x="245" y="131"></point>
        <point x="245" y="133"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="2" y="194"></point>
        <point x="13" y="197"></point>
        <point x="30" y="191"></point>
        <point x="38" y="193"></point>
        <point x="38" y="205"></point>
        <point x="20" y="226"></point>
        <point x="20" y="257"></point>
        <point x="27" y="265"></point>
        <point x="38" y="266"></point>
        <point x="40" y="260"></point>
        <point x="31" y="253"></point>
        <point x="31" y="230"></point>
        <point x="60" y="206"></point>
        <point x="68" y="198"></point>
        <point x="75" y="209"></point>
        <point x="66" y="228"></point>
        <point x="65" y="243"></point>
        <point x="82" y="261"></point>
        <point x="84" y="268"></point>
        <point x="100" y="267"></point>
        <point x="103" y="261"></point>
        <point x="77" y="239"></point>
        <point x="79" y="231"></point>
        <point x="100" y="207"></point>
        <point x="98" y="196"></point>
        <point x="119" y="201"></point>
        <point x="143" y="202"></point>
        <point x="160" y="195"></point>
        <point x="166" y="210"></point>
        <point x="172" y="213"></point>
        <point x="173" y="238"></point>
        <point x="167" y="251"></point>
        <point x="160" y="248"></point>
        <point x="154" y="265"></point>
        <point x="169" y="264"></point>
        <point x="178" y="247"></point>
        <point x="186" y="240"></point>
        <point x="198" y="260"></point>
        <point x="200" y="271"></point>
        <point x="217" y="271"></point>
        <point x="219" y="262"></point>
        <point x="207" y="258"></point>
        <point x="195" y="230"></point>
        <point x="192" y="198"></point>
        <point x="210" y="184"></point>
        <point x="227" y="164"></point>
        <point x="242" y="144"></point>
        <point x="259" y="145"></point>
        <point x="284" y="151"></point>
        <point x="277" y="141"></point>
        <point x="293" y="140"></point>
        <point x="299" y="134"></point>
        <point x="297" y="127"></point>
        <point x="273" y="119"></point>
        <point x="270" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="-1" y="195"></point>
        <point x="14" y="180"></point>
        <point x="36" y="166"></point>
        <point x="40" y="153"></point>
        <point x="53" y="140"></point>
        <point x="82" y="131"></point>
        <point x="134" y="133"></point>
        <point x="159" y="126"></point>
        <point x="188" y="115"></point>
        <point x="227" y="108"></point>
        <point x="236" y="102"></point>
        <point x="238" y="98"></point>
        <point x="268" y="86"></point>
        <point x="269" y="92"></point>
        <point x="281" y="87"></point>
        <point x="269" y="103"></point>
        <point x="269" y="113"></point>
      </polygon>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <previewCommands>setup repeat 35 [ go ]</previewCommands>
</model>
